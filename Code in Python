{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "sMmgwulM1dR1"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn import preprocessing\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "from sklearn.preprocessing import normalize\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.ensemble import BaggingClassifier\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.model_selection import GridSearchCV\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.ensemble import StackingClassifier,  RandomForestClassifier, GradientBoostingClassifier\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn import metrics\n",
        "from sklearn.metrics import r2_score\n",
        "from sklearn.metrics import accuracy_score"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Data uploading**"
      ],
      "metadata": {
        "id": "17dVu87haPpN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df  = pd.read_csv(\"/content/Crop_recommendation.csv\", encoding=\"ISO-8859-1\")"
      ],
      "metadata": {
        "id": "VxNljJAh1t3n"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "1LQ3I0sW2ojx",
        "outputId": "b6d15ed0-adb6-48c3-90d2-1eadc2ec7388",
        "collapsed": true
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      N     P     K  temperature   humidity        ph    rainfall label\n",
              "0  90.0  42.0  43.0    20.879744  82.002744  6.502985  202.935536  rice\n",
              "1  85.0  58.0  12.0    21.770462  80.319644  7.038096  226.655537  rice\n",
              "2  60.0  55.0  44.0    23.004459  82.320763  7.840207  263.964248  rice\n",
              "3  74.0  35.0  40.0    26.491096  80.158363  6.980401  242.864034  rice\n",
              "4  78.0  42.0  80.0    20.130175  81.604873  7.628473  262.717340  rice"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-839c3f5a-b261-40f3-b9c0-5e3dc1ceb710\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>N</th>\n",
              "      <th>P</th>\n",
              "      <th>K</th>\n",
              "      <th>temperature</th>\n",
              "      <th>humidity</th>\n",
              "      <th>ph</th>\n",
              "      <th>rainfall</th>\n",
              "      <th>label</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>90.0</td>\n",
              "      <td>42.0</td>\n",
              "      <td>43.0</td>\n",
              "      <td>20.879744</td>\n",
              "      <td>82.002744</td>\n",
              "      <td>6.502985</td>\n",
              "      <td>202.935536</td>\n",
              "      <td>rice</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>85.0</td>\n",
              "      <td>58.0</td>\n",
              "      <td>12.0</td>\n",
              "      <td>21.770462</td>\n",
              "      <td>80.319644</td>\n",
              "      <td>7.038096</td>\n",
              "      <td>226.655537</td>\n",
              "      <td>rice</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>60.0</td>\n",
              "      <td>55.0</td>\n",
              "      <td>44.0</td>\n",
              "      <td>23.004459</td>\n",
              "      <td>82.320763</td>\n",
              "      <td>7.840207</td>\n",
              "      <td>263.964248</td>\n",
              "      <td>rice</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>74.0</td>\n",
              "      <td>35.0</td>\n",
              "      <td>40.0</td>\n",
              "      <td>26.491096</td>\n",
              "      <td>80.158363</td>\n",
              "      <td>6.980401</td>\n",
              "      <td>242.864034</td>\n",
              "      <td>rice</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>78.0</td>\n",
              "      <td>42.0</td>\n",
              "      <td>80.0</td>\n",
              "      <td>20.130175</td>\n",
              "      <td>81.604873</td>\n",
              "      <td>7.628473</td>\n",
              "      <td>262.717340</td>\n",
              "      <td>rice</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-839c3f5a-b261-40f3-b9c0-5e3dc1ceb710')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-839c3f5a-b261-40f3-b9c0-5e3dc1ceb710 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-839c3f5a-b261-40f3-b9c0-5e3dc1ceb710');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-7abeb286-3bc6-469d-99a1-2af0d92c3ae9\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7abeb286-3bc6-469d-99a1-2af0d92c3ae9')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-7abeb286-3bc6-469d-99a1-2af0d92c3ae9 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 2500,\n  \"fields\": [\n    {\n      \"column\": \"N\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 36.54395995345191,\n        \"min\": 0.0,\n        \"max\": 140.0,\n        \"num_unique_values\": 435,\n        \"samples\": [\n          36.18326178,\n          48.0,\n          116.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"P\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 31.366254170932557,\n        \"min\": 5.0,\n        \"max\": 145.0,\n        \"num_unique_values\": 413,\n        \"samples\": [\n          28.59747663,\n          34.00453344,\n          46.67949366\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"K\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 280.0054459824766,\n        \"min\": -8965.0,\n        \"max\": 8521.0,\n        \"num_unique_values\": 402,\n        \"samples\": [\n          66.21069849,\n          55.72974395,\n          22.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"temperature\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.212074762941578,\n        \"min\": 8.825674745,\n        \"max\": 43.67549305,\n        \"num_unique_values\": 2497,\n        \"samples\": [\n          15.11,\n          31.068104,\n          18.78359608\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"humidity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 21.181284177328756,\n        \"min\": 14.25803981,\n        \"max\": 99.98187601,\n        \"num_unique_values\": 2497,\n        \"samples\": [\n          63.76,\n          69.07228553,\n          87.4024767\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ph\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7430407232144483,\n        \"min\": 3.504752314,\n        \"max\": 9.93509073,\n        \"num_unique_values\": 2481,\n        \"samples\": [\n          6.358740355,\n          6.452006451,\n          6.519779583\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rainfall\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 53.498265064602506,\n        \"min\": 20.21126747,\n        \"max\": 298.5601175,\n        \"num_unique_values\": 2499,\n        \"samples\": [\n          66.03866512,\n          224.4016682,\n          102.5184759\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"label\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 25,\n        \"samples\": [\n          \"lentil\",\n          \"orange\",\n          \"rice\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Over View of data**"
      ],
      "metadata": {
        "id": "sLxwXEJa5dbz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Shape of the dataframe : \", df.shape)\n",
        "df.isna().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 352
        },
        "id": "OLABjbQh3OQ8",
        "outputId": "e4f81312-f86c-4584-9386-8d01b2e88db9",
        "collapsed": true
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Shape of the dataframe :  (2500, 8)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "N              0\n",
              "P              0\n",
              "K              0\n",
              "temperature    0\n",
              "humidity       0\n",
              "ph             0\n",
              "rainfall       0\n",
              "label          0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>N</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>P</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>K</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>temperature</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>humidity</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ph</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>rainfall</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>label</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WMOgi6c_3319",
        "outputId": "e6d579a1-9ffc-4343-8877-e4e130b6ec77"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 2500 entries, 0 to 2499\n",
            "Data columns (total 8 columns):\n",
            " #   Column       Non-Null Count  Dtype  \n",
            "---  ------       --------------  -----  \n",
            " 0   N            2500 non-null   float64\n",
            " 1   P            2500 non-null   float64\n",
            " 2   K            2500 non-null   float64\n",
            " 3   temperature  2500 non-null   float64\n",
            " 4   humidity     2500 non-null   float64\n",
            " 5   ph           2500 non-null   float64\n",
            " 6   rainfall     2500 non-null   float64\n",
            " 7   label        2500 non-null   object \n",
            "dtypes: float64(7), object(1)\n",
            "memory usage: 156.4+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 320
        },
        "id": "gRTzCpcT4KaE",
        "outputId": "b890f713-a529-4b63-8514-07a1b34fa281",
        "collapsed": true
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                 N            P            K  temperature     humidity  \\\n",
              "count  2500.000000  2500.000000  2500.000000  2500.000000  2500.000000   \n",
              "mean     53.880164    52.464743    53.760829    25.355290    71.189392   \n",
              "std      36.543960    31.366254   280.005446     5.212075    21.181284   \n",
              "min       0.000000     5.000000 -8965.000000     8.825675    14.258040   \n",
              "25%      23.000000    29.298084    21.000000    22.456768    60.751049   \n",
              "50%      41.000000    50.000000    36.000000    25.429392    78.499011   \n",
              "75%      87.000000    66.000000    52.000000    28.476929    88.314323   \n",
              "max     140.000000   145.000000  8521.000000    43.675493    99.981876   \n",
              "\n",
              "                ph     rainfall  \n",
              "count  2500.000000  2500.000000  \n",
              "mean      6.474935   103.410813  \n",
              "std       0.743041    53.498265  \n",
              "min       3.504752    20.211267  \n",
              "25%       6.012186    64.996549  \n",
              "50%       6.435852    94.579773  \n",
              "75%       6.909004   124.393188  \n",
              "max       9.935091   298.560117  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e4b39207-ab20-4f5b-8fc0-b15837e846b2\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>N</th>\n",
              "      <th>P</th>\n",
              "      <th>K</th>\n",
              "      <th>temperature</th>\n",
              "      <th>humidity</th>\n",
              "      <th>ph</th>\n",
              "      <th>rainfall</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>2500.000000</td>\n",
              "      <td>2500.000000</td>\n",
              "      <td>2500.000000</td>\n",
              "      <td>2500.000000</td>\n",
              "      <td>2500.000000</td>\n",
              "      <td>2500.000000</td>\n",
              "      <td>2500.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>53.880164</td>\n",
              "      <td>52.464743</td>\n",
              "      <td>53.760829</td>\n",
              "      <td>25.355290</td>\n",
              "      <td>71.189392</td>\n",
              "      <td>6.474935</td>\n",
              "      <td>103.410813</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>36.543960</td>\n",
              "      <td>31.366254</td>\n",
              "      <td>280.005446</td>\n",
              "      <td>5.212075</td>\n",
              "      <td>21.181284</td>\n",
              "      <td>0.743041</td>\n",
              "      <td>53.498265</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>-8965.000000</td>\n",
              "      <td>8.825675</td>\n",
              "      <td>14.258040</td>\n",
              "      <td>3.504752</td>\n",
              "      <td>20.211267</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>23.000000</td>\n",
              "      <td>29.298084</td>\n",
              "      <td>21.000000</td>\n",
              "      <td>22.456768</td>\n",
              "      <td>60.751049</td>\n",
              "      <td>6.012186</td>\n",
              "      <td>64.996549</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>41.000000</td>\n",
              "      <td>50.000000</td>\n",
              "      <td>36.000000</td>\n",
              "      <td>25.429392</td>\n",
              "      <td>78.499011</td>\n",
              "      <td>6.435852</td>\n",
              "      <td>94.579773</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>87.000000</td>\n",
              "      <td>66.000000</td>\n",
              "      <td>52.000000</td>\n",
              "      <td>28.476929</td>\n",
              "      <td>88.314323</td>\n",
              "      <td>6.909004</td>\n",
              "      <td>124.393188</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>140.000000</td>\n",
              "      <td>145.000000</td>\n",
              "      <td>8521.000000</td>\n",
              "      <td>43.675493</td>\n",
              "      <td>99.981876</td>\n",
              "      <td>9.935091</td>\n",
              "      <td>298.560117</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e4b39207-ab20-4f5b-8fc0-b15837e846b2')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e4b39207-ab20-4f5b-8fc0-b15837e846b2 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e4b39207-ab20-4f5b-8fc0-b15837e846b2');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-373355a4-a989-4b70-a01d-a2b7a879518c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-373355a4-a989-4b70-a01d-a2b7a879518c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-373355a4-a989-4b70-a01d-a2b7a879518c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"N\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 865.678256840269,\n        \"min\": 0.0,\n        \"max\": 2500.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          53.880163603464,\n          41.0,\n          2500.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"P\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 865.7224675562622,\n        \"min\": 5.0,\n        \"max\": 2500.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          52.464742944832004,\n          50.0,\n          2500.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"K\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4758.960288075858,\n        \"min\": -8965.0,\n        \"max\": 8521.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          53.76082901837199,\n          36.0,\n          2500.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"temperature\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 875.911388618931,\n        \"min\": 5.212074762941578,\n        \"max\": 2500.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          25.35528961469,\n          25.429391934999998,\n          2500.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"humidity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 862.4877307411292,\n        \"min\": 14.25803981,\n        \"max\": 2500.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          71.18939233831999,\n          78.49901052000001,\n          2500.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ph\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 881.8664727966104,\n        \"min\": 0.7430407232144483,\n        \"max\": 2500.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          6.4749354655096,\n          6.435851553499999,\n          2500.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rainfall\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 849.6706342056684,\n        \"min\": 20.21126747,\n        \"max\": 2500.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          103.41081319908399,\n          94.579773315,\n          2500.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X = df.drop(\"label\",axis = 1)\n",
        "Y = df[\"label\"]"
      ],
      "metadata": {
        "id": "hPVnZ-oU6qHQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Remove Outliers**"
      ],
      "metadata": {
        "id": "iEB91UlbTMfC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "crops = df['label'].unique()  # collection of all crop\n",
        "print(len(crops))\n",
        "print(crops)\n",
        "print(pd.value_counts(df['label']))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jwNhYVgfFfkB",
        "outputId": "04e25ed4-53e7-461c-f980-5098f24804a3",
        "collapsed": true
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "25\n",
            "['rice' 'Corn' 'chickpea' 'kidneybeans' 'pigeonpeas' 'mothbeans'\n",
            " 'mungbean' 'blackgram' 'lentil' 'pomegranate' 'banana' 'mango' 'grapes'\n",
            " 'watermelon' 'muskmelon' 'apple' 'orange' 'papaya' 'coconut' 'cotton'\n",
            " 'jute' 'coffee' 'wheat' 'soybean' 'turmeric']\n",
            "label\n",
            "rice           100\n",
            "Corn           100\n",
            "chickpea       100\n",
            "kidneybeans    100\n",
            "pigeonpeas     100\n",
            "mothbeans      100\n",
            "mungbean       100\n",
            "blackgram      100\n",
            "lentil         100\n",
            "pomegranate    100\n",
            "banana         100\n",
            "mango          100\n",
            "grapes         100\n",
            "watermelon     100\n",
            "muskmelon      100\n",
            "apple          100\n",
            "orange         100\n",
            "papaya         100\n",
            "coconut        100\n",
            "cotton         100\n",
            "jute           100\n",
            "coffee         100\n",
            "wheat          100\n",
            "soybean        100\n",
            "turmeric       100\n",
            "Name: count, dtype: int64\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-10-a0edc36e1b59>:4: FutureWarning: pandas.value_counts is deprecated and will be removed in a future version. Use pd.Series(obj).value_counts() instead.\n",
            "  print(pd.value_counts(df['label']))\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "columns = X.columns\n",
        "for i in columns :\n",
        "  print(i)"
      ],
      "metadata": {
        "id": "A5zcmNaAhStJ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "outputId": "32bbecd4-e799-4163-fd63-55a29f3b632c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "N\n",
            "P\n",
            "K\n",
            "temperature\n",
            "humidity\n",
            "ph\n",
            "rainfall\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Replace Outliers values**\n",
        "\n",
        "*   Outliers were below LB replace by LB\n",
        "*   Outliers were above UB replace by UB\n",
        "\n"
      ],
      "metadata": {
        "id": "PmdXWU59apc1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# IQR method\n",
        "\n",
        "def outlier_remover(x, column_name):\n",
        "  q1 = x.quantile(0.25)\n",
        "  q3 = x.quantile(0.75)\n",
        "  IQR = q3 - q1\n",
        "  lower_bound = q1 - 1.5 * IQR\n",
        "  upper_bound = q3 + 1.5 * IQR\n",
        "\n",
        "  print(f\"Lower limit : {lower_bound}, Upper limit : {upper_bound} \")\n",
        "  print(f\"Minimum value : {x.min()}, Maximum value : {x.max()}\")\n",
        "\n",
        "  if (x.min() > lower_bound):\n",
        "    print(\"Lower limit pass :- No need to remove outliers \")\n",
        "  else :\n",
        "    print(\"Lower limit fail :- need to remove outliers\")\n",
        "    # df.drop(x[x < lower_bound].index,inplace=True)\n",
        "    df.loc[x[x < lower_bound].index,column_name] = lower_bound\n",
        "\n",
        "  if (x.max() < upper_bound):\n",
        "    print(\"upper limit pass :- No need to remove outliers\")\n",
        "  else :\n",
        "    print(\"Lower limit fail :- need to remove outliers\")\n",
        "    # df.drop(x[x > upper_bound].index,inplace=True)\n",
        "    df.loc[x[x > upper_bound].index,column_name] = upper_bound\n",
        "\n",
        "\n",
        "  # thos value are outliers, find their row index and remove this perticualr row form our data"
      ],
      "metadata": {
        "id": "_ArSG8EBUf9v"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for i in columns:\n",
        "  for j in crops:\n",
        "    print(\"column : \", i, \", crop : \", j)\n",
        "    d = df.loc[df['label'] == j, i]\n",
        "    outlier_remover(d, i)\n",
        "    print(\"---------------------------------------\")\n",
        "  print(\"++++++++++++++++++++++++++++++++++++++++++++++\")\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "asDBrnk0YVuA",
        "outputId": "02c6d5ff-7010-40fb-e301-33e5cdf07c9d",
        "collapsed": true
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "column :  N , crop :  rice\n",
            "Lower limit : 36.0, Upper limit : 124.0 \n",
            "Minimum value : 60.0, Maximum value : 99.0\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  N , crop :  Corn\n",
            "Lower limit : 38.875, Upper limit : 115.875 \n",
            "Minimum value : 60.0, Maximum value : 100.0\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  N , crop :  chickpea\n",
            "Lower limit : -3.0, Upper limit : 85.0 \n",
            "Minimum value : 20.0, Maximum value : 60.0\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  N , crop :  kidneybeans\n",
            "Lower limit : -12.625, Upper limit : 52.375 \n",
            "Minimum value : 0.0, Maximum value : 40.0\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  N , crop :  pigeonpeas\n",
            "Lower limit : -20.375, Upper limit : 60.625 \n",
            "Minimum value : 0.0, Maximum value : 40.0\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  N , crop :  mothbeans\n",
            "Lower limit : -17.875, Upper limit : 59.125 \n",
            "Minimum value : 0.0, Maximum value : 40.0\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  N , crop :  mungbean\n",
            "Lower limit : -21.5, Upper limit : 62.5 \n",
            "Minimum value : 0.0, Maximum value : 40.0\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  N , crop :  blackgram\n",
            "Lower limit : -6.125, Upper limit : 86.875 \n",
            "Minimum value : 20.0, Maximum value : 60.0\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  N , crop :  lentil\n",
            "Lower limit : -21.375, Upper limit : 59.625 \n",
            "Minimum value : 0.0, Maximum value : 40.0\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  N , crop :  pomegranate\n",
            "Lower limit : -23.875, Upper limit : 61.125 \n",
            "Minimum value : 0.0, Maximum value : 40.0\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  N , crop :  banana\n",
            "Lower limit : 67.625, Upper limit : 132.625 \n",
            "Minimum value : 80.0, Maximum value : 120.0\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  N , crop :  mango\n",
            "Lower limit : -22.875, Upper limit : 62.125 \n",
            "Minimum value : 0.0, Maximum value : 40.0\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  N , crop :  grapes\n",
            "Lower limit : -23.125, Upper limit : 69.875 \n",
            "Minimum value : 0.0, Maximum value : 40.0\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  N , crop :  watermelon\n",
            "Lower limit : 57.5, Upper limit : 141.5 \n",
            "Minimum value : 80.0, Maximum value : 120.0\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  N , crop :  muskmelon\n",
            "Lower limit : 56.0, Upper limit : 144.0 \n",
            "Minimum value : 80.0, Maximum value : 120.0\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  N , crop :  apple\n",
            "Lower limit : -20.0, Upper limit : 60.0 \n",
            "Minimum value : 0.0, Maximum value : 40.0\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  N , crop :  orange\n",
            "Lower limit : -24.0, Upper limit : 64.0 \n",
            "Minimum value : 0.0, Maximum value : 40.0\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  N , crop :  papaya\n",
            "Lower limit : 8.625, Upper limit : 89.625 \n",
            "Minimum value : 31.0, Maximum value : 70.0\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  N , crop :  coconut\n",
            "Lower limit : -12.125, Upper limit : 56.875 \n",
            "Minimum value : 0.0, Maximum value : 40.0\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  N , crop :  cotton\n",
            "Lower limit : 78.125, Upper limit : 157.125 \n",
            "Minimum value : 100.0, Maximum value : 140.0\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  N , crop :  jute\n",
            "Lower limit : 42.625, Upper limit : 115.625 \n",
            "Minimum value : 60.0, Maximum value : 100.0\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  N , crop :  coffee\n",
            "Lower limit : 54.5, Upper limit : 146.5 \n",
            "Minimum value : 80.0, Maximum value : 120.0\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  N , crop :  wheat\n",
            "Lower limit : 55.51125, Upper limit : 141.42125000000001 \n",
            "Minimum value : 80.22, Maximum value : 119.48\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  N , crop :  soybean\n",
            "Lower limit : 1.846974269999997, Upper limit : 118.53738601 \n",
            "Minimum value : 30.26799468, Maximum value : 89.94185966\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  N , crop :  turmeric\n",
            "Lower limit : 30.064097232500004, Upper limit : 122.4830837725 \n",
            "Minimum value : 50.22740504, Maximum value : 99.85001985\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "++++++++++++++++++++++++++++++++++++++++++++++\n",
            "column :  P , crop :  rice\n",
            "Lower limit : 21.125, Upper limit : 74.125 \n",
            "Minimum value : 35.0, Maximum value : 60.0\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  P , crop :  Corn\n",
            "Lower limit : 22.875, Upper limit : 75.875 \n",
            "Minimum value : 35.0, Maximum value : 60.0\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  P , crop :  chickpea\n",
            "Lower limit : 41.5, Upper limit : 93.5 \n",
            "Minimum value : 55.0, Maximum value : 80.0\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  P , crop :  kidneybeans\n",
            "Lower limit : 41.5, Upper limit : 93.5 \n",
            "Minimum value : 55.0, Maximum value : 80.0\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  P , crop :  pigeonpeas\n",
            "Lower limit : 42.625, Upper limit : 91.625 \n",
            "Minimum value : 55.0, Maximum value : 80.0\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  P , crop :  mothbeans\n",
            "Lower limit : 24.375, Upper limit : 73.375 \n",
            "Minimum value : 35.0, Maximum value : 60.0\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  P , crop :  mungbean\n",
            "Lower limit : 18.625, Upper limit : 75.625 \n",
            "Minimum value : 35.0, Maximum value : 60.0\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  P , crop :  blackgram\n",
            "Lower limit : 44.0, Upper limit : 92.0 \n",
            "Minimum value : 55.0, Maximum value : 80.0\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  P , crop :  lentil\n",
            "Lower limit : 41.875, Upper limit : 94.875 \n",
            "Minimum value : 55.0, Maximum value : 80.0\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  P , crop :  pomegranate\n",
            "Lower limit : -5.0, Upper limit : 43.0 \n",
            "Minimum value : 5.0, Maximum value : 30.0\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  P , crop :  banana\n",
            "Lower limit : 55.5, Upper limit : 107.5 \n",
            "Minimum value : 70.0, Maximum value : 95.0\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  P , crop :  mango\n",
            "Lower limit : -3.125, Upper limit : 57.875 \n",
            "Minimum value : 15.0, Maximum value : 40.0\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  P , crop :  grapes\n",
            "Lower limit : 105.875, Upper limit : 158.875 \n",
            "Minimum value : 120.0, Maximum value : 145.0\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  P , crop :  watermelon\n",
            "Lower limit : -9.5, Upper limit : 42.5 \n",
            "Minimum value : 5.0, Maximum value : 30.0\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  P , crop :  muskmelon\n",
            "Lower limit : -7.5, Upper limit : 44.5 \n",
            "Minimum value : 5.0, Maximum value : 30.0\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  P , crop :  apple\n",
            "Lower limit : 105.375, Upper limit : 162.375 \n",
            "Minimum value : 120.0, Maximum value : 145.0\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  P , crop :  orange\n",
            "Lower limit : -12.0, Upper limit : 44.0 \n",
            "Minimum value : 5.0, Maximum value : 30.0\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  P , crop :  papaya\n",
            "Lower limit : 37.5, Upper limit : 81.5 \n",
            "Minimum value : 46.0, Maximum value : 70.0\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  P , crop :  coconut\n",
            "Lower limit : -12.0, Upper limit : 46.0 \n",
            "Minimum value : 5.0, Maximum value : 30.0\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  P , crop :  cotton\n",
            "Lower limit : 22.0, Upper limit : 70.0 \n",
            "Minimum value : 35.0, Maximum value : 60.0\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  P , crop :  jute\n",
            "Lower limit : 22.625, Upper limit : 71.625 \n",
            "Minimum value : 35.0, Maximum value : 60.0\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  P , crop :  coffee\n",
            "Lower limit : 6.125, Upper limit : 51.125 \n",
            "Minimum value : 15.0, Maximum value : 40.0\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  P , crop :  wheat\n",
            "Lower limit : 39.11625, Upper limit : 81.04625000000001 \n",
            "Minimum value : 50.14, Maximum value : 69.71\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  P , crop :  soybean\n",
            "Lower limit : -2.020035248750002, Upper limit : 81.50068064125 \n",
            "Minimum value : 20.65629164, Maximum value : 59.72143309\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  P , crop :  turmeric\n",
            "Lower limit : 12.957715191250003, Upper limit : 61.87487708124999 \n",
            "Minimum value : 25.3666631, Maximum value : 49.75206533\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "++++++++++++++++++++++++++++++++++++++++++++++\n",
            "column :  K , crop :  rice\n",
            "Lower limit : 29.875, Upper limit : 50.875 \n",
            "Minimum value : -85.0, Maximum value : 5689.0\n",
            "Lower limit fail :- need to remove outliers\n",
            "Lower limit fail :- need to remove outliers\n",
            "---------------------------------------\n",
            "column :  K , crop :  Corn\n",
            "Lower limit : 9.125, Upper limit : 30.125 \n",
            "Minimum value : -8965.0, Maximum value : 8521.0\n",
            "Lower limit fail :- need to remove outliers\n",
            "Lower limit fail :- need to remove outliers\n",
            "---------------------------------------\n",
            "column :  K , crop :  chickpea\n",
            "Lower limit : 68.0, Upper limit : 92.0 \n",
            "Minimum value : -896.0, Maximum value : 963.0\n",
            "Lower limit fail :- need to remove outliers\n",
            "Lower limit fail :- need to remove outliers\n",
            "---------------------------------------\n",
            "column :  K , crop :  kidneybeans\n",
            "Lower limit : 9.125, Upper limit : 30.125 \n",
            "Minimum value : 15.0, Maximum value : 25.0\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  K , crop :  pigeonpeas\n",
            "Lower limit : 10.5, Upper limit : 30.5 \n",
            "Minimum value : 15.0, Maximum value : 25.0\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  K , crop :  mothbeans\n",
            "Lower limit : 10.5, Upper limit : 30.5 \n",
            "Minimum value : 15.0, Maximum value : 25.0\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  K , crop :  mungbean\n",
            "Lower limit : 9.5, Upper limit : 29.5 \n",
            "Minimum value : 15.0, Maximum value : 25.0\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  K , crop :  blackgram\n",
            "Lower limit : 8.875, Upper limit : 29.875 \n",
            "Minimum value : 15.0, Maximum value : 25.0\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  K , crop :  lentil\n",
            "Lower limit : 9.5, Upper limit : 29.5 \n",
            "Minimum value : 15.0, Maximum value : 25.0\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  K , crop :  pomegranate\n",
            "Lower limit : 30.5, Upper limit : 50.5 \n",
            "Minimum value : 35.0, Maximum value : 45.0\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  K , crop :  banana\n",
            "Lower limit : 38.0, Upper limit : 62.0 \n",
            "Minimum value : 45.0, Maximum value : 55.0\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  K , crop :  mango\n",
            "Lower limit : 19.5, Upper limit : 39.5 \n",
            "Minimum value : 25.0, Maximum value : 35.0\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  K , crop :  grapes\n",
            "Lower limit : 188.0, Upper limit : 212.0 \n",
            "Minimum value : 195.0, Maximum value : 205.0\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  K , crop :  watermelon\n",
            "Lower limit : 38.0, Upper limit : 62.0 \n",
            "Minimum value : 45.0, Maximum value : 55.0\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  K , crop :  muskmelon\n",
            "Lower limit : 39.125, Upper limit : 60.125 \n",
            "Minimum value : 45.0, Maximum value : 55.0\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  K , crop :  apple\n",
            "Lower limit : 188.0, Upper limit : 212.0 \n",
            "Minimum value : 195.0, Maximum value : 205.0\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  K , crop :  orange\n",
            "Lower limit : 1.625, Upper limit : 18.625 \n",
            "Minimum value : 5.0, Maximum value : 15.0\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  K , crop :  papaya\n",
            "Lower limit : 39.5, Upper limit : 59.5 \n",
            "Minimum value : 45.0, Maximum value : 55.0\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  K , crop :  coconut\n",
            "Lower limit : 23.0, Upper limit : 39.0 \n",
            "Minimum value : 25.0, Maximum value : 35.0\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  K , crop :  cotton\n",
            "Lower limit : 9.5, Upper limit : 29.5 \n",
            "Minimum value : 15.0, Maximum value : 25.0\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  K , crop :  jute\n",
            "Lower limit : 28.0, Upper limit : 52.0 \n",
            "Minimum value : 35.0, Maximum value : 45.0\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  K , crop :  coffee\n",
            "Lower limit : 18.0, Upper limit : 42.0 \n",
            "Minimum value : 25.0, Maximum value : 35.0\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  K , crop :  wheat\n",
            "Lower limit : 31.27875, Upper limit : 69.30875 \n",
            "Minimum value : 40.1, Maximum value : 59.8\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  K , crop :  soybean\n",
            "Lower limit : 2.344823588749996, Upper limit : 103.34862885875 \n",
            "Minimum value : 30.3669958, Maximum value : 79.75118849\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  K , crop :  turmeric\n",
            "Lower limit : 21.697677725000013, Upper limit : 151.45551948499997 \n",
            "Minimum value : 52.19807795, Maximum value : 119.3729543\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "++++++++++++++++++++++++++++++++++++++++++++++\n",
            "column :  temperature , crop :  rice\n",
            "Lower limit : 16.547105671249998, Upper limit : 30.893660181250002 \n",
            "Minimum value : 20.0454142, Maximum value : 26.92995077\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  temperature , crop :  Corn\n",
            "Lower limit : 12.205486709999999, Upper limit : 32.517732370000004 \n",
            "Minimum value : 18.04185513, Maximum value : 26.54986394\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  temperature , crop :  chickpea\n",
            "Lower limit : 15.127426535, Upper limit : 22.462162995 \n",
            "Minimum value : 17.02498456, Maximum value : 20.99502153\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  temperature , crop :  kidneybeans\n",
            "Lower limit : 12.731772018750002, Upper limit : 27.566035508749998 \n",
            "Minimum value : 15.33042636, Maximum value : 24.92360104\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  temperature , crop :  pigeonpeas\n",
            "Lower limit : 9.957323371250004, Upper limit : 44.38163798125 \n",
            "Minimum value : 18.31910448, Maximum value : 36.97794384\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  temperature , crop :  mothbeans\n",
            "Lower limit : 20.88721006625, Upper limit : 35.662427236250004 \n",
            "Minimum value : 24.01825377, Maximum value : 31.99928579\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  temperature , crop :  mungbean\n",
            "Lower limit : 25.823702553749992, Upper limit : 31.303563463750006 \n",
            "Minimum value : 27.01470397, Maximum value : 29.9145443\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  temperature , crop :  blackgram\n",
            "Lower limit : 20.987356576250004, Upper limit : 39.215107366249995 \n",
            "Minimum value : 25.09737391, Maximum value : 34.9466155\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  temperature , crop :  lentil\n",
            "Lower limit : 13.163444683750008, Upper limit : 35.99189899374999 \n",
            "Minimum value : 18.06486101, Maximum value : 29.94413861\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  temperature , crop :  pomegranate\n",
            "Lower limit : 13.660441731250003, Upper limit : 30.021242601249995 \n",
            "Minimum value : 18.07132963, Maximum value : 24.96273236\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  temperature , crop :  banana\n",
            "Lower limit : 22.284417318749995, Upper limit : 32.48172530875001 \n",
            "Minimum value : 25.01018457, Maximum value : 29.90888522\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  temperature , crop :  mango\n",
            "Lower limit : 22.207320788749996, Upper limit : 40.08776821875 \n",
            "Minimum value : 27.00315545, Maximum value : 35.99009679\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  temperature , crop :  grapes\n",
            "Lower limit : -5.719165791249999, Upper limit : 52.74933695875 \n",
            "Minimum value : 8.825674745, Maximum value : 41.94865736\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  temperature , crop :  watermelon\n",
            "Lower limit : 22.854565599999997, Upper limit : 28.307851940000003 \n",
            "Minimum value : 24.04355803, Maximum value : 26.98603693\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  temperature , crop :  muskmelon\n",
            "Lower limit : 25.8432626675, Upper limit : 31.486102687500008 \n",
            "Minimum value : 27.02415146, Maximum value : 29.94349168\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  temperature , crop :  apple\n",
            "Lower limit : 20.391916161250002, Upper limit : 25.115356551249995 \n",
            "Minimum value : 21.0365275, Maximum value : 23.99686172\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  temperature , crop :  orange\n",
            "Lower limit : -1.704129688750001, Upper limit : 48.30397560125 \n",
            "Minimum value : 10.01081312, Maximum value : 34.90665289\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  temperature , crop :  papaya\n",
            "Lower limit : 12.779100847499997, Upper limit : 54.8474294875 \n",
            "Minimum value : 23.0124018, Maximum value : 43.67549305\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  temperature , crop :  coconut\n",
            "Lower limit : 22.771474292500002, Upper limit : 32.097456872500004 \n",
            "Minimum value : 25.00872392, Maximum value : 29.8690834\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  temperature , crop :  cotton\n",
            "Lower limit : 20.083435235000003, Upper limit : 27.907915595 \n",
            "Minimum value : 22.00085141, Maximum value : 25.99237426\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  temperature , crop :  jute\n",
            "Lower limit : 20.8745442975, Upper limit : 28.907036757500002 \n",
            "Minimum value : 23.09433785, Maximum value : 26.98582182\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  temperature , crop :  coffee\n",
            "Lower limit : 20.428973170000003, Upper limit : 30.534545570000002 \n",
            "Minimum value : 23.05951896, Maximum value : 27.92374437\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  temperature , crop :  wheat\n",
            "Lower limit : 2.7962500000000006, Upper limit : 31.98625 \n",
            "Minimum value : 10.22, Maximum value : 24.86\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  temperature , crop :  soybean\n",
            "Lower limit : 16.786539052499997, Upper limit : 34.77437911250001 \n",
            "Minimum value : 20.0260378, Maximum value : 29.88810636\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  temperature , crop :  turmeric\n",
            "Lower limit : 13.373185322499994, Upper limit : 42.2834716225 \n",
            "Minimum value : 20.0633181, Maximum value : 34.69617247\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "++++++++++++++++++++++++++++++++++++++++++++++\n",
            "column :  humidity , crop :  rice\n",
            "Lower limit : 77.17485294000002, Upper limit : 87.24749447999997 \n",
            "Minimum value : 80.12267476, Maximum value : 84.96907151\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  humidity , crop :  Corn\n",
            "Lower limit : 47.30231501124999, Upper limit : 82.70916452125002 \n",
            "Minimum value : 55.28220433, Maximum value : 74.82913698\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  humidity , crop :  chickpea\n",
            "Lower limit : 11.082770396250005, Upper limit : 22.575915026249994 \n",
            "Minimum value : 14.25803981, Maximum value : 19.96978871\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  humidity , crop :  kidneybeans\n",
            "Lower limit : 14.303959232499995, Upper limit : 28.789118772500007 \n",
            "Minimum value : 18.09224048, Maximum value : 24.96969858\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  humidity , crop :  pigeonpeas\n",
            "Lower limit : 10.406597370000007, Upper limit : 84.96307897 \n",
            "Minimum value : 30.40046769, Maximum value : 69.69141302\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  humidity , crop :  mothbeans\n",
            "Lower limit : 27.661462105, Upper limit : 78.501910425 \n",
            "Minimum value : 40.00933429, Maximum value : 64.95585424\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  humidity , crop :  mungbean\n",
            "Lower limit : 76.82572770125002, Upper limit : 94.43598689124998 \n",
            "Minimum value : 80.03499648, Maximum value : 89.99615558\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  humidity , crop :  blackgram\n",
            "Lower limit : 55.989574212499996, Upper limit : 74.79212845250001 \n",
            "Minimum value : 60.06534859, Maximum value : 69.96100028\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  humidity , crop :  lentil\n",
            "Lower limit : 55.07072572749999, Upper limit : 74.8635291075 \n",
            "Minimum value : 60.09116626, Maximum value : 69.92375891\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  humidity , crop :  pomegranate\n",
            "Lower limit : 81.60312697375, Upper limit : 98.93084450375002 \n",
            "Minimum value : 85.12912161, Maximum value : 94.99897537\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  humidity , crop :  banana\n",
            "Lower limit : 70.71521126374998, Upper limit : 90.30725739375 \n",
            "Minimum value : 75.03193255, Maximum value : 84.97849241\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  humidity , crop :  mango\n",
            "Lower limit : 41.102240926250005, Upper limit : 59.311155256250004 \n",
            "Minimum value : 45.02236377, Maximum value : 54.9640534\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  humidity , crop :  grapes\n",
            "Lower limit : 77.79980635, Upper limit : 85.95887429 \n",
            "Minimum value : 80.01639435, Maximum value : 83.98351748\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  humidity , crop :  watermelon\n",
            "Lower limit : 76.048642855, Upper limit : 94.60256527499999 \n",
            "Minimum value : 80.02621335, Maximum value : 89.98405233\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  humidity , crop :  muskmelon\n",
            "Lower limit : 86.71557865500003, Upper limit : 98.04033613499999 \n",
            "Minimum value : 90.01506395, Maximum value : 94.96218673\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  humidity , crop :  apple\n",
            "Lower limit : 87.16144002250002, Upper limit : 97.3179394425 \n",
            "Minimum value : 90.02575116, Maximum value : 94.92048112\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  humidity , crop :  orange\n",
            "Lower limit : 87.53643827000002, Upper limit : 96.86427727 \n",
            "Minimum value : 90.00621688, Maximum value : 94.96419851\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  humidity , crop :  papaya\n",
            "Lower limit : 87.65598226124999, Upper limit : 97.02529903125 \n",
            "Minimum value : 90.03863107, Maximum value : 94.94482086\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  humidity , crop :  coconut\n",
            "Lower limit : 86.22296323625, Upper limit : 103.08171592625001 \n",
            "Minimum value : 90.01734526, Maximum value : 99.98187601\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  humidity , crop :  cotton\n",
            "Lower limit : 69.04009997374999, Upper limit : 90.35985402375002 \n",
            "Minimum value : 75.00539324, Maximum value : 84.87668973\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  humidity , crop :  jute\n",
            "Lower limit : 61.62142703000003, Upper limit : 96.19966524999998 \n",
            "Minimum value : 70.88259632, Maximum value : 89.89106506\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  humidity , crop :  coffee\n",
            "Lower limit : 39.166704678749994, Upper limit : 78.22731426875 \n",
            "Minimum value : 50.04557009, Maximum value : 69.94807345\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  humidity , crop :  wheat\n",
            "Lower limit : 49.29375, Upper limit : 91.92375 \n",
            "Minimum value : 60.22, Maximum value : 79.86\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  humidity , crop :  soybean\n",
            "Lower limit : 40.83896027749999, Upper limit : 78.97185993750001 \n",
            "Minimum value : 50.25207706, Maximum value : 69.75325116\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  humidity , crop :  turmeric\n",
            "Lower limit : 44.29530061499998, Upper limit : 109.730998295 \n",
            "Minimum value : 60.151837, Maximum value : 89.58993092\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "++++++++++++++++++++++++++++++++++++++++++++++\n",
            "column :  ph , crop :  rice\n",
            "Lower limit : 4.116260276124999, Upper limit : 8.792879095125 \n",
            "Minimum value : 5.005306977, Maximum value : 7.868474653\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  ph , crop :  Corn\n",
            "Lower limit : 4.733284512375, Upper limit : 7.723815347375001 \n",
            "Minimum value : 5.513697923, Maximum value : 6.995843776\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  ph , crop :  chickpea\n",
            "Lower limit : 4.7174803262500005, Upper limit : 9.74811105025 \n",
            "Minimum value : 5.988992796, Maximum value : 8.868741443\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  ph , crop :  kidneybeans\n",
            "Lower limit : 5.259960362499999, Upper limit : 6.233385786500001 \n",
            "Minimum value : 5.502999119, Maximum value : 5.99812453\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  ph , crop :  pigeonpeas\n",
            "Lower limit : 2.8798129576250013, Upper limit : 8.542486802624998 \n",
            "Minimum value : 4.548202098, Maximum value : 7.445444883\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  ph , crop :  mothbeans\n",
            "Lower limit : 0.8973884882500007, Upper limit : 12.84717103425 \n",
            "Minimum value : 3.504752314, Maximum value : 9.93509073\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  ph , crop :  mungbean\n",
            "Lower limit : 5.711175062375001, Upper limit : 7.744657183375 \n",
            "Minimum value : 6.218923893, Maximum value : 7.199495368\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  ph , crop :  blackgram\n",
            "Lower limit : 5.902755391624999, Upper limit : 8.329370894625 \n",
            "Minimum value : 6.500144962, Maximum value : 7.775306272\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  ph , crop :  lentil\n",
            "Lower limit : 5.121513682500002, Upper limit : 8.7579633165 \n",
            "Minimum value : 5.91645379, Maximum value : 7.841496029\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  ph , crop :  pomegranate\n",
            "Lower limit : 4.589665735874999, Upper limit : 8.266921372875 \n",
            "Minimum value : 5.561851831, Maximum value : 7.199504273\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  ph , crop :  banana\n",
            "Lower limit : 5.035143085874999, Upper limit : 6.916661160875002 \n",
            "Minimum value : 5.505393833, Maximum value : 6.490074429\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  ph , crop :  mango\n",
            "Lower limit : 3.334481078625, Upper limit : 8.265827495625 \n",
            "Minimum value : 4.507523551, Maximum value : 6.967417766\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  ph , crop :  grapes\n",
            "Lower limit : 4.971568150874999, Upper limit : 7.118996355875 \n",
            "Minimum value : 5.510924849, Maximum value : 6.499604931\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  ph , crop :  watermelon\n",
            "Lower limit : 5.5128316618749995, Upper limit : 7.503343518875001 \n",
            "Minimum value : 6.000975617, Maximum value : 6.956508826\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  ph , crop :  muskmelon\n",
            "Lower limit : 5.564579593874999, Upper limit : 7.141607884875 \n",
            "Minimum value : 6.002927293, Maximum value : 6.781050373\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  ph , crop :  apple\n",
            "Lower limit : 5.061076621874999, Upper limit : 6.7803400888750005 \n",
            "Minimum value : 5.514253142, Maximum value : 6.499226821\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  ph , crop :  orange\n",
            "Lower limit : 4.936671214749998, Upper limit : 9.065507136750002 \n",
            "Minimum value : 6.010391864, Maximum value : 7.995848977\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  ph , crop :  papaya\n",
            "Lower limit : 6.280093322625001, Upper limit : 7.175597507624998 \n",
            "Minimum value : 6.501521192, Maximum value : 6.993473247\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  ph , crop :  coconut\n",
            "Lower limit : 5.01383140875, Upper limit : 6.92642319475 \n",
            "Minimum value : 5.50158009, Maximum value : 6.470465614\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  ph , crop :  cotton\n",
            "Lower limit : 4.7708095588749995, Upper limit : 9.020381337875 \n",
            "Minimum value : 5.801047545, Maximum value : 7.994679507\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  ph , crop :  jute\n",
            "Lower limit : 5.180235730749999, Upper limit : 8.29430019275 \n",
            "Minimum value : 6.002524871, Maximum value : 7.488014404\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  ph , crop :  coffee\n",
            "Lower limit : 5.376160809750001, Upper limit : 8.18567217975 \n",
            "Minimum value : 6.020947179, Maximum value : 7.493191968\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  ph , crop :  wheat\n",
            "Lower limit : 5.1325, Upper limit : 8.4725 \n",
            "Minimum value : 6.02, Maximum value : 7.5\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  ph , crop :  soybean\n",
            "Lower limit : 5.589407785874998, Upper limit : 7.442398996875001 \n",
            "Minimum value : 6.019281445, Maximum value : 6.99750377\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  ph , crop :  turmeric\n",
            "Lower limit : 4.7499705651249995, Upper limit : 7.783179548125001 \n",
            "Minimum value : 5.517726104, Maximum value : 6.967110804\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "++++++++++++++++++++++++++++++++++++++++++++++\n",
            "column :  rainfall , crop :  rice\n",
            "Lower limit : 114.64470175, Upper limit : 353.81622395 \n",
            "Minimum value : 182.5616319, Maximum value : 298.5601175\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  rainfall , crop :  Corn\n",
            "Lower limit : 26.145754846249986, Upper limit : 144.11589141625 \n",
            "Minimum value : 60.65171481, Maximum value : 109.7515385\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  rainfall , crop :  chickpea\n",
            "Lower limit : 55.289299908749996, Upper limit : 104.14559097875 \n",
            "Minimum value : 65.11365631, Maximum value : 94.78189594\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  rainfall , crop :  kidneybeans\n",
            "Lower limit : 20.46190557500003, Upper limit : 194.76279981499997 \n",
            "Minimum value : 60.27552528, Maximum value : 149.7441028\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  rainfall , crop :  pigeonpeas\n",
            "Lower limit : 39.004026762500004, Upper limit : 261.2492448625 \n",
            "Minimum value : 90.05422663, Maximum value : 198.8298806\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  rainfall , crop :  mothbeans\n",
            "Lower limit : -1.3141105337500036, Upper limit : 103.48456013625001 \n",
            "Minimum value : 30.92014047, Maximum value : 74.44330654\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  rainfall , crop :  mungbean\n",
            "Lower limit : 25.502280630000005, Upper limit : 72.43833190999999 \n",
            "Minimum value : 36.12042927, Maximum value : 59.87232071\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  rainfall , crop :  blackgram\n",
            "Lower limit : 53.0275025325, Upper limit : 82.42017681249999 \n",
            "Minimum value : 60.41790253, Maximum value : 74.91559514\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  rainfall , crop :  lentil\n",
            "Lower limit : 28.932562957500007, Upper limit : 62.6372500775 \n",
            "Minimum value : 35.03484812, Maximum value : 54.9393771\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  rainfall , crop :  pomegranate\n",
            "Lower limit : 97.48116202500003, Upper limit : 117.44433682499997 \n",
            "Minimum value : 102.5184759, Maximum value : 112.4750941\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  rainfall , crop :  banana\n",
            "Lower limit : 73.03951698749998, Upper limit : 135.5237634075 \n",
            "Minimum value : 90.10978128, Maximum value : 119.84797\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  rainfall , crop :  mango\n",
            "Lower limit : 82.81802320874999, Upper limit : 106.27042439874998 \n",
            "Minimum value : 89.29147581, Maximum value : 100.8124659\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  rainfall , crop :  grapes\n",
            "Lower limit : 59.67801711250002, Upper limit : 78.76817545249997 \n",
            "Minimum value : 65.01095312, Maximum value : 74.91506217\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  rainfall , crop :  watermelon\n",
            "Lower limit : 30.539185162499994, Upper limit : 71.93696076250001 \n",
            "Minimum value : 40.12650421, Maximum value : 59.75980023\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  rainfall , crop :  muskmelon\n",
            "Lower limit : 14.87753929125, Upper limit : 34.05203820125 \n",
            "Minimum value : 20.21126747, Maximum value : 29.86681385\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  rainfall , crop :  apple\n",
            "Lower limit : 87.50101862500001, Upper limit : 137.018662425 \n",
            "Minimum value : 100.1173443, Maximum value : 124.9831618\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  rainfall , crop :  orange\n",
            "Lower limit : 92.20122942500001, Upper limit : 129.584647825 \n",
            "Minimum value : 100.1737964, Maximum value : 119.6946577\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  rainfall , crop :  papaya\n",
            "Lower limit : -98.73867993749997, Upper limit : 383.07369872249996 \n",
            "Minimum value : 40.35153141, Maximum value : 248.8592986\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  rainfall , crop :  coconut\n",
            "Lower limit : 69.28896092499998, Upper limit : 282.189007725 \n",
            "Minimum value : 131.0900076, Maximum value : 225.6323656\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  rainfall , crop :  cotton\n",
            "Lower limit : 41.6083397725, Upper limit : 119.7042284125 \n",
            "Minimum value : 60.65381719, Maximum value : 99.93100821\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  rainfall , crop :  jute\n",
            "Lower limit : 121.26441068749999, Upper limit : 227.4678043875 \n",
            "Minimum value : 150.2355238, Maximum value : 199.8362913\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  rainfall , crop :  coffee\n",
            "Lower limit : 67.8213380624999, Upper limit : 249.6624255625001 \n",
            "Minimum value : 115.1564012, Maximum value : 199.4735636\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  rainfall , crop :  wheat\n",
            "Lower limit : 29.25625, Upper limit : 111.44624999999999 \n",
            "Minimum value : 51.0, Maximum value : 99.33\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  rainfall , crop :  soybean\n",
            "Lower limit : 1.923061518749975, Upper limit : 169.59984500875004 \n",
            "Minimum value : 51.4806576, Maximum value : 119.9429061\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "column :  rainfall , crop :  turmeric\n",
            "Lower limit : 48.37060386249996, Upper limit : 252.65063296250005 \n",
            "Minimum value : 101.165687, Maximum value : 199.6043523\n",
            "Lower limit pass :- No need to remove outliers \n",
            "upper limit pass :- No need to remove outliers\n",
            "---------------------------------------\n",
            "++++++++++++++++++++++++++++++++++++++++++++++\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "cfv1CTN9f8Hb",
        "outputId": "5dd73825-4d15-44dc-ee3f-65ed52f22aef",
        "collapsed": true
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              N          P           K  temperature   humidity        ph  \\\n",
              "0     90.000000  42.000000   43.000000    20.879744  82.002744  6.502985   \n",
              "1     85.000000  58.000000   29.875000    21.770462  80.319644  7.038096   \n",
              "2     60.000000  55.000000   44.000000    23.004459  82.320763  7.840207   \n",
              "3     74.000000  35.000000   40.000000    26.491096  80.158363  6.980401   \n",
              "4     78.000000  42.000000   50.875000    20.130175  81.604873  7.628473   \n",
              "...         ...        ...         ...          ...        ...       ...   \n",
              "2495  55.233090  38.376681   54.826465    24.712605  67.167048  6.912380   \n",
              "2496  88.660546  45.243906  104.482670    29.562883  73.206299  6.048688   \n",
              "2497  63.904026  40.213170  106.583346    32.929013  83.615589  6.771704   \n",
              "2498  85.387539  46.028883  104.167990    30.787184  82.127393  6.045964   \n",
              "2499  89.670916  34.338726   54.287087    33.386379  68.197400  5.746576   \n",
              "\n",
              "        rainfall     label  \n",
              "0     202.935536      rice  \n",
              "1     226.655537      rice  \n",
              "2     263.964248      rice  \n",
              "3     242.864034      rice  \n",
              "4     262.717340      rice  \n",
              "...          ...       ...  \n",
              "2495  186.530746  turmeric  \n",
              "2496  115.627551  turmeric  \n",
              "2497  121.069478  turmeric  \n",
              "2498  111.031532  turmeric  \n",
              "2499  102.979275  turmeric  \n",
              "\n",
              "[2500 rows x 8 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d8b6d7e8-71fc-4ef8-9a6b-c0a022cf8aaf\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>N</th>\n",
              "      <th>P</th>\n",
              "      <th>K</th>\n",
              "      <th>temperature</th>\n",
              "      <th>humidity</th>\n",
              "      <th>ph</th>\n",
              "      <th>rainfall</th>\n",
              "      <th>label</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>90.000000</td>\n",
              "      <td>42.000000</td>\n",
              "      <td>43.000000</td>\n",
              "      <td>20.879744</td>\n",
              "      <td>82.002744</td>\n",
              "      <td>6.502985</td>\n",
              "      <td>202.935536</td>\n",
              "      <td>rice</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>85.000000</td>\n",
              "      <td>58.000000</td>\n",
              "      <td>29.875000</td>\n",
              "      <td>21.770462</td>\n",
              "      <td>80.319644</td>\n",
              "      <td>7.038096</td>\n",
              "      <td>226.655537</td>\n",
              "      <td>rice</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>60.000000</td>\n",
              "      <td>55.000000</td>\n",
              "      <td>44.000000</td>\n",
              "      <td>23.004459</td>\n",
              "      <td>82.320763</td>\n",
              "      <td>7.840207</td>\n",
              "      <td>263.964248</td>\n",
              "      <td>rice</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>74.000000</td>\n",
              "      <td>35.000000</td>\n",
              "      <td>40.000000</td>\n",
              "      <td>26.491096</td>\n",
              "      <td>80.158363</td>\n",
              "      <td>6.980401</td>\n",
              "      <td>242.864034</td>\n",
              "      <td>rice</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>78.000000</td>\n",
              "      <td>42.000000</td>\n",
              "      <td>50.875000</td>\n",
              "      <td>20.130175</td>\n",
              "      <td>81.604873</td>\n",
              "      <td>7.628473</td>\n",
              "      <td>262.717340</td>\n",
              "      <td>rice</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2495</th>\n",
              "      <td>55.233090</td>\n",
              "      <td>38.376681</td>\n",
              "      <td>54.826465</td>\n",
              "      <td>24.712605</td>\n",
              "      <td>67.167048</td>\n",
              "      <td>6.912380</td>\n",
              "      <td>186.530746</td>\n",
              "      <td>turmeric</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2496</th>\n",
              "      <td>88.660546</td>\n",
              "      <td>45.243906</td>\n",
              "      <td>104.482670</td>\n",
              "      <td>29.562883</td>\n",
              "      <td>73.206299</td>\n",
              "      <td>6.048688</td>\n",
              "      <td>115.627551</td>\n",
              "      <td>turmeric</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2497</th>\n",
              "      <td>63.904026</td>\n",
              "      <td>40.213170</td>\n",
              "      <td>106.583346</td>\n",
              "      <td>32.929013</td>\n",
              "      <td>83.615589</td>\n",
              "      <td>6.771704</td>\n",
              "      <td>121.069478</td>\n",
              "      <td>turmeric</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2498</th>\n",
              "      <td>85.387539</td>\n",
              "      <td>46.028883</td>\n",
              "      <td>104.167990</td>\n",
              "      <td>30.787184</td>\n",
              "      <td>82.127393</td>\n",
              "      <td>6.045964</td>\n",
              "      <td>111.031532</td>\n",
              "      <td>turmeric</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2499</th>\n",
              "      <td>89.670916</td>\n",
              "      <td>34.338726</td>\n",
              "      <td>54.287087</td>\n",
              "      <td>33.386379</td>\n",
              "      <td>68.197400</td>\n",
              "      <td>5.746576</td>\n",
              "      <td>102.979275</td>\n",
              "      <td>turmeric</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>2500 rows × 8 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d8b6d7e8-71fc-4ef8-9a6b-c0a022cf8aaf')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d8b6d7e8-71fc-4ef8-9a6b-c0a022cf8aaf button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d8b6d7e8-71fc-4ef8-9a6b-c0a022cf8aaf');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-5c5236fb-45ae-4d42-b86e-eebc402b4783\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5c5236fb-45ae-4d42-b86e-eebc402b4783')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-5c5236fb-45ae-4d42-b86e-eebc402b4783 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_e5072cb3-6cb1-450f-9e7a-e0e762ff89b6\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_e5072cb3-6cb1-450f-9e7a-e0e762ff89b6 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 2500,\n  \"fields\": [\n    {\n      \"column\": \"N\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 36.54395995345191,\n        \"min\": 0.0,\n        \"max\": 140.0,\n        \"num_unique_values\": 435,\n        \"samples\": [\n          36.18326178,\n          48.0,\n          116.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"P\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 31.366254170932557,\n        \"min\": 5.0,\n        \"max\": 145.0,\n        \"num_unique_values\": 413,\n        \"samples\": [\n          28.59747663,\n          34.00453344,\n          46.67949366\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"K\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 48.38868011638991,\n        \"min\": 5.0,\n        \"max\": 205.0,\n        \"num_unique_values\": 378,\n        \"samples\": [\n          68.63835613,\n          62.14818875,\n          60.30748116\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"temperature\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.212074762941578,\n        \"min\": 8.825674745,\n        \"max\": 43.67549305,\n        \"num_unique_values\": 2497,\n        \"samples\": [\n          15.11,\n          31.068104,\n          18.78359608\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"humidity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 21.181284177328756,\n        \"min\": 14.25803981,\n        \"max\": 99.98187601,\n        \"num_unique_values\": 2497,\n        \"samples\": [\n          63.76,\n          69.07228553,\n          87.4024767\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ph\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7430407232144483,\n        \"min\": 3.504752314,\n        \"max\": 9.93509073,\n        \"num_unique_values\": 2481,\n        \"samples\": [\n          6.358740355,\n          6.452006451,\n          6.519779583\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rainfall\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 53.498265064602506,\n        \"min\": 20.21126747,\n        \"max\": 298.5601175,\n        \"num_unique_values\": 2499,\n        \"samples\": [\n          66.03866512,\n          224.4016682,\n          102.5184759\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"label\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 25,\n        \"samples\": [\n          \"lentil\",\n          \"orange\",\n          \"rice\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Graphical Visulization**"
      ],
      "metadata": {
        "id": "a5qdKkBgnXwj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data = df[\"temperature\"]\n",
        "sns.relplot(x = range(len(data)), y = data, kind = 'scatter', hue = Y)"
      ],
      "metadata": {
        "id": "Ck3WB-lhiOQc",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 602
        },
        "outputId": "cca2d64d-c350-4b4b-afda-ed7a414a31e6",
        "collapsed": true
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.FacetGrid at 0x7933b6eb3ed0>"
            ]
          },
          "metadata": {},
          "execution_count": 13
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 644x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Scatter plot of all crops based on rainfall column**"
      ],
      "metadata": {
        "id": "viLwMdR-cHmB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data = df[\"rainfall\"]\n",
        "sns.relplot(x = range(len(data)), y = data, kind = 'scatter', hue = Y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 602
        },
        "id": "vGdDwcGHkW4b",
        "outputId": "49e3fa08-0de8-4265-e47d-9181347fe08d",
        "collapsed": true
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.FacetGrid at 0x7e2aa02f54d0>"
            ]
          },
          "metadata": {},
          "execution_count": 14
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 644x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for i in columns:\n",
        "  sns.histplot(df[i], bins = 20, kde = True, color = 'blue')\n",
        "  plt.title(f\"histplot of {i}\")\n",
        "  plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "qfCv-uzpgq2v",
        "outputId": "0a43b409-3214-4d7a-b0f2-9418b02a45af",
        "collapsed": true
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAjsAAAHHCAYAAABZbpmkAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAWUNJREFUeJzt3XlcVXX+x/EXu7gAIpuouC/gWprKVOaWa5Zp0+ZWU1oOtmhj5pRWNo1li7aY1pTaZjU12WKmuaX1yy3M3BDNUkxFREXcAIXz++Mb10g0xQvn3sP7+XjcB/feczj3cyjx7Xf1sSzLQkRERMShfO0uQERERKQ0KeyIiIiIoynsiIiIiKMp7IiIiIijKeyIiIiIoynsiIiIiKMp7IiIiIijKeyIiIiIoynsiIiIiKMp7IjIOT322GP4+PiQmZn5p+fWqVOH2267rfSL+oPCGj3JqVOnePDBB6lVqxa+vr707dvX7pJEyi2FHRGx1bx583jsscds+/xXXnmFWbNmuf26M2bM4JlnnuGGG27gzTffZOTIkWc9t2PHjvj4+Lge4eHhXHbZZcyYMYOCggK31yZS3vjbXYCIOEdqaiq+vhf2b6h58+YxdepU2wLPK6+8QkREhNtbpJYsWUKNGjWYPHnyeZ1fs2ZNJk6cCMD+/ft56623uOOOO9i6dStPPfWUW2sTKW8UdkTEbYKCguwuwWNkZGQQFhZ23ueHhoYycOBA1+u77rqLxo0b8/LLL/PEE08QEBBQClWKlA/qxhKR85KVlcVtt91GWFgYoaGh3H777Rw/frzIOX8cs3Py5Ekef/xxGjZsSIUKFahWrRpXXHEFCxcuBOC2225j6tSpAEW6cQB27NiBj48Pzz77LJMnT6Z27doEBwdz1VVXsXHjxj+t99SpUzzxxBPUr1+foKAg6tSpwz//+U9yc3OL1Ltp0yaWLVvm+uyOHTue87rHjh3jgQceoFatWgQFBdG4cWOeffZZLMsqUvfSpUvZtGmT67pff/31n9b8exUrVqR9+/YcO3aM/fv3X9D3ikhRatkRkfNy4403UrduXSZOnMjatWt5/fXXiYqK4umnnz7r9zz22GNMnDiRO++8k7Zt25Kdnc3333/P2rVrufrqq7nrrrvYs2cPCxcu5O233y72Gm+99RZHjhwhKSmJnJwcXnjhBTp37syGDRuIjo4+62ffeeedvPnmm9xwww088MADrFq1iokTJ5KSksKcOXMAmDJlCvfccw+VK1fm4YcfBjjnNS3L4tprr2Xp0qXccccdtGrVigULFjB69Gh2797N5MmTiYyM5O233+bJJ5/k6NGjrq6p+Pj4P/0Z/9HPP/+Mn5/fBbUQiUgxLBGRc3j00UctwPrb3/5W5P3rr7/eqlatWpH3ateubQ0ZMsT1umXLllbv3r3Pef2kpCSruF9Fv/zyiwVYwcHB1q+//up6f9WqVRZgjRw58owaC61bt84CrDvvvLPINf/xj39YgLVkyRLXe02bNrWuuuqqc9ZY6JNPPrEA61//+leR92+44QbLx8fH+umnn1zvXXXVVVbTpk3P67pXXXWV1aRJE2v//v3W/v37rZSUFOvee++1AKtPnz7ndQ0ROTt1Y4nIebn77ruLvL7yyis5cOAA2dnZZ/2esLAwNm3axLZt20r8uX379qVGjRqu123btqVdu3bMmzfvrN9TeGzUqFFF3n/ggQcA+OKLL0pUy7x58/Dz8+Pee+8947qWZfHll1+W6LoAW7ZsITIyksjISOLj43nppZfo3bs3M2bMKPE1RcRQ2BGR8xIXF1fkddWqVQE4dOjQWb9nwoQJZGVl0ahRI5o3b87o0aNZv379BX1uw4YNz3ivUaNG7Nix46zfs3PnTnx9fWnQoEGR92NiYggLC2Pnzp0XVMPvrxsbG0uVKlWKvF/YRVXS64IZP7Rw4UIWLVrEt99+S3p6OnPnziUiIqLE1xQRQ2FHRM6Ln59fse9bvw3MLU6HDh3Yvn07M2bMoFmzZrz++utceumlvP7666VVZhGettDguVSqVImuXbvSpUsXLr/8cqKiouwuScQxFHZEpFSFh4dz++23895777Fr1y5atGhRZE2dPwskxXWBbd26lTp16pz1e2rXrk1BQcEZ37tv3z6ysrKoXbv2eX/+H6+7Z88ejhw5UuT9LVu2uI6LiOdR2BGRUnPgwIEirytXrkyDBg2KTP+uVKkSYKa2F+eTTz5h9+7drterV69m1apV9OzZ86yf26tXL8DMtvq9559/HoDevXsX+fyzfXZx183Pz+fll18u8v7kyZPx8fE5Z00iYh9NPReRUpOQkEDHjh1p3bo14eHhfP/993z00UeMGDHCdU7r1q0BuPfee+nevTt+fn7cfPPNruMNGjTgiiuuYPjw4eTm5jJlyhSqVavGgw8+eNbPbdmyJUOGDOG1114jKyuLq666itWrV/Pmm2/St29fOnXqVOTzp02bxr/+9S8aNGhAVFQUnTt3Lva6ffr0oVOnTjz88MPs2LGDli1b8tVXX/Hpp59y//33U79+/Yv9kYlIKVDYEZFSc++99/LZZ5/x1VdfkZubS+3atfnXv/7F6NGjXef069ePe+65h/fff5933nkHy7KKhJ3Bgwfj6+vLlClTyMjIoG3btrz88stUr179nJ/9+uuvU69ePWbNmsWcOXOIiYlh7NixPProo0XOGz9+PDt37mTSpEkcOXKEq6666qxhx9fXl88++4zx48fzwQcfMHPmTOrUqcMzzzzjmuklIp7HxzrX6EIREZvs2LGDunXr8swzz/CPf/zD7nJExItpzI6IiIg4msKOiIiIOJrCjoiIiDiaxuyIiIiIo6llR0RERBxNYUdEREQcTevsAAUFBezZs4cqVap41V46IiIi5ZllWRw5coTY2Fh8fc/efqOwA+zZs4datWrZXYaIiIiUwK5du6hZs+ZZjyvsAFWqVAHMDyskJMTmakREROR8ZGdnU6tWLdff42ejsMPpXY9DQkIUdkRERLzMnw1B0QBlERERcTSFHREREXE0hR0RERFxNIUdERERcTSFHREREXE0hR0RERFxNIUdERERcTSFHREREXE0hR0RERFxNIUdERERcTSFHREREXE0hR0RERFxNIUdERERcTSFHREREXE0f7sLEBH3S0tLIzMzs1SuHRERQVxcXKlcW0SkNNgadqZNm8a0adPYsWMHAE2bNmX8+PH07NkTgI4dO7Js2bIi33PXXXcxffp01+u0tDSGDx/O0qVLqVy5MkOGDGHixIn4+yvHSfmUlpZGkybxnDhxvFSuHxxckS1bUhR4RMRr2JoIatasyVNPPUXDhg2xLIs333yT6667jh9++IGmTZsCMHToUCZMmOD6nooVK7qe5+fn07t3b2JiYvjuu+/Yu3cvgwcPJiAggH//+99lfj8iniAzM5MTJ45z/fXvEBkZ79Zr79+fwpw5A8nMzFTYERGvYWvY6dOnT5HXTz75JNOmTWPlypWusFOxYkViYmKK/f6vvvqKzZs3s2jRIqKjo2nVqhVPPPEEY8aM4bHHHiMwMLDU70HEU0VGxlO9+qV2lyEiYjuPGaCcn5/P+++/z7Fjx0hMTHS9/+677xIREUGzZs0YO3Ysx4+fbppfsWIFzZs3Jzo62vVe9+7dyc7OZtOmTWVav4iIiHgm2we2bNiwgcTERHJycqhcuTJz5swhISEBgFtvvZXatWsTGxvL+vXrGTNmDKmpqXz88ccApKenFwk6gOt1enr6WT8zNzeX3Nxc1+vs7Gx335aIiIh4CNvDTuPGjVm3bh2HDx/mo48+YsiQISxbtoyEhASGDRvmOq958+ZUr16dLl26sH37durXr1/iz5w4cSKPP/64O8oXERERD2d7N1ZgYCANGjSgdevWTJw4kZYtW/LCCy8Ue267du0A+OmnnwCIiYlh3759Rc4pfH22cT4AY8eO5fDhw67Hrl273HErIiIi4oFsDzt/VFBQUKSL6ffWrVsHQPXq1QFITExkw4YNZGRkuM5ZuHAhISEhrq6w4gQFBRESElLkISIiIs5kazfW2LFj6dmzJ3FxcRw5coTZs2fz9ddfs2DBArZv387s2bPp1asX1apVY/369YwcOZIOHTrQokULALp160ZCQgKDBg1i0qRJpKen88gjj5CUlERQUJCdtyYiIiIewtawk5GRweDBg9m7dy+hoaG0aNGCBQsWcPXVV7Nr1y4WLVrElClTOHbsGLVq1aJ///488sgjru/38/Nj7ty5DB8+nMTERCpVqsSQIUOKrMsjIiIi5ZutYeeNN94467FatWqdsXpycWrXrs28efPcWZaIiIg4iMeN2RERERFxJ4UdERERcTSFHREREXE0hR0RERFxNIUdERERcTSFHREREXE0hR0RERFxNIUdERERcTSFHREREXE0hR0RERFxNIUdERERcTSFHREREXE0hR0RERFxNIUdERERcTSFHREREXE0hR0RERFxNIUdERERcTSFHREREXE0hR0RERFxNIUdERERcTSFHREREXE0hR0RERFxNIUdERERcTSFHREREXE0hR0RERFxNIUdERERcTSFHREREXE0hR0RERFxNIUdERERcTSFHREREXE0hR0RERFxNIUdERERcTSFHREREXE0hR0RERFxNIUdERERcTSFHREREXE0hR0RERFxNIUdERERcTSFHREREXE0W8POtGnTaNGiBSEhIYSEhJCYmMiXX37pOp6Tk0NSUhLVqlWjcuXK9O/fn3379hW5RlpaGr1796ZixYpERUUxevRoTp06Vda3IiIiIh7K1rBTs2ZNnnrqKZKTk/n+++/p3Lkz1113HZs2bQJg5MiRfP7553z44YcsW7aMPXv20K9fP9f35+fn07t3b/Ly8vjuu+948803mTVrFuPHj7frlkRERMTD+Nv54X369Cny+sknn2TatGmsXLmSmjVr8sYbbzB79mw6d+4MwMyZM4mPj2flypW0b9+er776is2bN7No0SKio6Np1aoVTzzxBGPGjOGxxx4jMDDQjtsSERERD+IxY3by8/N5//33OXbsGImJiSQnJ3Py5Em6du3qOqdJkybExcWxYsUKAFasWEHz5s2Jjo52ndO9e3eys7NdrUPFyc3NJTs7u8hDREREnMn2sLNhwwYqV65MUFAQd999N3PmzCEhIYH09HQCAwMJCwsrcn50dDTp6ekApKenFwk6hccLj53NxIkTCQ0NdT1q1arl3psSERERj2F72GncuDHr1q1j1apVDB8+nCFDhrB58+ZS/cyxY8dy+PBh12PXrl2l+nkiIiJiH1vH7AAEBgbSoEEDAFq3bs2aNWt44YUXuOmmm8jLyyMrK6tI686+ffuIiYkBICYmhtWrVxe5XuFsrcJzihMUFERQUJCb70REREQ8ke0tO39UUFBAbm4urVu3JiAggMWLF7uOpaamkpaWRmJiIgCJiYls2LCBjIwM1zkLFy4kJCSEhISEMq9dREREPI+tLTtjx46lZ8+exMXFceTIEWbPns3XX3/NggULCA0N5Y477mDUqFGEh4cTEhLCPffcQ2JiIu3btwegW7duJCQkMGjQICZNmkR6ejqPPPIISUlJarkRERERwOawk5GRweDBg9m7dy+hoaG0aNGCBQsWcPXVVwMwefJkfH196d+/P7m5uXTv3p1XXnnF9f1+fn7MnTuX4cOHk5iYSKVKlRgyZAgTJkyw65ZERETEw9gadt54441zHq9QoQJTp05l6tSpZz2ndu3azJs3z92liYiIiEN43JgdEREREXdS2BERERFHU9gRERERR1PYEREREUdT2BERERFHU9gRERERR1PYEREREUdT2BERERFHU9gRERERR1PYEREREUdT2BERERFHU9gRERERR1PYEREREUdT2BERERFHU9gRERERR1PYEREREUdT2BERERFHU9gRERERR1PYEREREUdT2BERERFHU9gRERERR1PYEREREUdT2BERERFH87e7ABEpGwUFsGsXbNsGx47BiRNQsSLUqAF16kC1anZXKCJSOhR2RBzu1ClYsQJWr4ajR888/sMP5mvjxtChA8TGlm19IiKlTWFHxMFSU2H+fMjKMq+DgqBJE9OKU6ECHD4Mu3fDjh3m3NRUSEyErl3BV53cIuIQCjsijuTHypU1WL/evKpSBbp0gWbNwM/vzLMzM2H5ctiwwbQC7dkDN9wAlSuXbdUiIqVB/3YTcZgjR3yB+axfHw1A+/YwYgS0bFl80AGIiIB+/eDGGyEwEHbuhJkzi+/2EhHxNgo7Ig5y8CD8/e8Nga74++dzww3QvbsJMOcjPh6GDoXQUHOtt9+G48dLtWQRkVKnsCPiEPv3Q+fOsHlzJSCTa6/dStOmF36diAgYPNh0YWVkwOzZZpCziIi3UtgRcYCjR6FXL/jxR6hW7SRwFRERJ0p8vfBwGDQIgoPNAOYFC9xXq4hIWVPYEfFyeXnQvz98/72ZZfXqq1uBzRd93agoM44HzLULBzuLiHgbhR0RL2ZZcNdd8NVXZoHAL76AunVz3Xb9Bg3M2jsAc+dCVlaQ264tIlJWFHZEvNjUqTBrllkT56OPoF0793/GVVdB3bpw8iR8800c4OP+DxERKUUKOyJe6ptvYORI8/yZZ6Bnz9L5HF9fuPZaCAiAvXurAHeVzgeJiJQShR0RL7R7t1n079QpuPnm06GntISFmUUJjUns3RtQuh8oIuJGCjsiXiY31wxIzsiAFi3g9dfBpwx6li67DKKjjwJVmDy5Zul/oIiImyjsiHiZe+6BVaugalWYMwcqVSqbz/X1hSuu2AXks3hxVZYvL5vPFRG5WAo7Il7kP/8xDx8fs9hfvXpl+/nVqp0A/gPA/fdDfn7Zfr6ISEnYGnYmTpzIZZddRpUqVYiKiqJv376kpqYWOadjx474+PgUedx9991FzklLS6N3795UrFiRqKgoRo8ezSkt+SoOs3Kl2eMK4MknoUcPuyoZR+XKp/jhBzMTTETE09kadpYtW0ZSUhIrV65k4cKFnDx5km7dunHs2LEi5w0dOpS9e/e6HpMmTXIdy8/Pp3fv3uTl5fHdd9/x5ptvMmvWLMaPH1/WtyNSatLTzTidvDyz0N9DD9lZTSZDh6YDMH48nCj5Qs0iImXC384Pnz9/fpHXs2bNIioqiuTkZDoUrmQGVKxYkZiYmGKv8dVXX7F582YWLVpEdHQ0rVq14oknnmDMmDE89thjBJ7vDogiHiovD/76V9izx2zUOWtW2QxIPpcbb9zP//5Xk7Q0eOUVeOABe+sRETkXjxqzc/jwYQDCw8OLvP/uu+8SERFBs2bNGDt2LMd/tw3zihUraN68OdHR0a73unfvTnZ2Nps2bSr2c3Jzc8nOzi7yEPFUDzwA334LISHwySdQpYrdFUFgoMWjj5rnTz0FR47YW4+IyLl4TNgpKCjg/vvv5/LLL6dZs2au92+99Vbeeecdli5dytixY3n77bcZOHCg63h6enqRoAO4Xqenpxf7WRMnTiQ0NNT1qFWrVinckcjFe+stePll8/ydd6BRI3vr+b3Bg009mZkwZYrd1YiInJ2t3Vi/l5SUxMaNG/n222+LvD9s2DDX8+bNm1O9enW6dOnC9u3bqV+/fok+a+zYsYwaNcr1Ojs7W4FHPM6KFTB0qHn+6KPQp4+99fyRvz9MmGAWNXz2WTMlPizM7qpERM7kES07I0aMYO7cuSxdupSaNc+9WFm73zb/+emnnwCIiYlh3759Rc4pfH22cT5BQUGEhIQUeYh4kp07oW9fM16nb18zENgT/fWv0KwZZGefboESEfE0toYdy7IYMWIEc+bMYcmSJdStW/dPv2fdunUAVK9eHYDExEQ2bNhARkaG65yFCxcSEhJCQkJCqdQtUpqOHIFrrjErJLdqBW+/bRb080S+vvDPf5rnkyfD0aP21iMiUhxbf4UmJSXxzjvvMHv2bKpUqUJ6ejrp6emc+G0u6/bt23niiSdITk5mx44dfPbZZwwePJgOHTrQokULALp160ZCQgKDBg3ixx9/ZMGCBTzyyCMkJSURFBRk5+2JXLD8fLj1Vti4EWJi4PPPoXJlu6s6txtvhIYN4eBBePVVu6sRETmTrWFn2rRpHD58mI4dO1K9enXX44MPPgAgMDCQRYsW0a1bN5o0acIDDzxA//79+fzzz13X8PPzY+7cufj5+ZGYmMjAgQMZPHgwEyZMsOu2REpszBiYOxcqVIBPP4U/6dX1CH5+p9f9efZZrbsjIp7H1gHKlmWd83itWrVYtmzZn16ndu3azJs3z11lidhi6lR47jnzfNYsaNvW1nIuyMCB8PjjkJZmZpDddZfdFYmInOahIwFEypd33jm9FcSECXDTTfbWc6ECA2HkSPP8+eehoMDeekREfk9hR8Rmc+bAbbeZ5/feC488Yms5JXbHHRAaClu3whdf2F2NiMhpCjsiNvrwQzPANz8fhgwxM5rs3gqipKpUgcJlsQq740REPIHCjohN3nnHLMh36hQMGACvv+65U8zP1733msUGly2D5GS7qxERMbz8V6uI97EsePppGDTIjG25/XZ4800TErxdzZqnxxs9/7y9tYiIFFLYESlDeXkwfPjpqdr3329adPz8bC3LrQp3YvngA9i1y95aRERAYUekzOzeDZ06mYX3fHzghRfMGB1v77r6o0svhY4dzTikF1+0uxoREYUdkTIxb54JAd99Z2YsffqpGd/iVA88YL6+9prZ/kJExE4KOyKl6MgRs8Be795mr6uWLc3AXU/bwdzdevWCxo3NBqFvvGF3NSJS3insiJQCy4J334UmTUzrBpjxOStWQP36tpZWJnx9T4/deeEF06UlImIXhR0RN1u7Fq680myhsGcP1KsHS5aY8TnBwXZXV3YGDYLwcNixA7780u5qRKQ8U9gRcZPdu82iem3awP/9H1SsCP/+N2zaZAYmlzfBwWZVZYCXX7a3FhEp3xR2RC7Svn1mX6j69eE//zFdWLfeCqmpMHas2cG8vBo+3Mw8W7DAbCMhImIHhR2REsrMhDFjTDfVlCmQm2u6r775xozXqVnT7grtV7euGZwN8Mor9tYiIuWXwo7IBcrKgnHjzF/kkybB8ePQrh189ZXZJuGKK+yu0LMU7uY+cyYcPWpvLSJSPjlggXqR0pWWlkZmZia5uT7897+RzJgRQ3a2+aPTuPFxhg/fwxVXZOPjAz/8cP7XjYiIIC4urpSq9hxXXw0NG8K2bWY/sLvvtrsiESlvFHZEziEtLY3GjRPIybkOeBIo7JvaCIwnNXUO999fsmsHB1dky5YUxwceX19ISjJT719+2aw75K07u4uId1LYEUcobH1xt08/3U9OzjKgNQCVKuXRps0eGjbMw9f3EeCREl13//4U5swZSGZmpuPDDsCQIfDww2Zm2vLlcNVVdlckIuWJwo54vbS0NJo0iefEieNuvGooMBEYDoC//yk6dPCnfftAAgLqAHXc+FnOFxZm1h169VXTuqOwIyJlSWFHvF5mZiYnThzn+uvfITIy/qKuZVnwyy9h/N//1eLEiYDf3n2D7t3r0qZN54svthxLSjJhZ84c+PVXzVYTkbKjsCOOERkZT/Xql5b4+48fh88+M+vjAFSrBgkJC/nmmzsJCprvpirLr+bNTYvOsmUm9DzxhN0ViUh5oannIsCuXeYv4NRUM6C2QwczaygyMsPu0hylcBr6a6+ZdYlERMqCWnakXLMssznn4sVQUGBac264AWJi7K7Mma67DmrUMFtrfPQRDBhgd0UiUh6oZUfKrRMn4IMPYOFCE3SaNYOhQxV0SlNAgJl6DjB1qr21iEj5obAj5dKePaYrJTUV/PygVy/o1w+CguyuzPmGDjWhZ8UKSE62uxoRKQ8UdqRcsSxYvRpmzDDbPlStCn/7G1x2mRa6KysxMfDXv5rnat0RkbKgsCPlRm6uGSfy5ZeQnw9NmsCwYRAba3dl5U9Skvn6/vtw6JC9tYiI8ynsSLmQnm66rTZvNrOtuneHG2+EChXsrqx8SkyEFi3MuKk337S7GhFxOoUdcTTLMuNCXn8dDh6E0FC4/XZo317dVnby8YHhZnFqpk0z/51EREqLpp6LY+XlwRdfwPr15nXDhtC3L1SsaGtZRaSkpHjFNUvDgAEwejRs3QpLlkCXLnZXJCJOpbAjjpSRAR9+CJmZphWhSxf4y188pzXn6NG9gA8DBw4sxc84UmrXdocqVWDQINOyM22awo6IlB6FHXGUwtlWCxeaQchVqphFAj1tY/GcnCzAolOnl2nYMNGt1962bR5Ll44jJyfHrdctDcOHm6DzySdmOQANFheR0qCwI2dIS0sjMzOzVK4dERFBXCklj+PH/Zk9G376ybxu0MB0W1WqVCof5xZVqza4qP28ipOZWfrdWO7sKmvZshE//liZ557L4rnnwtx2XRGRQgo7UkRaWhpNmsRz4sTxUrl+cHBFtmxJKYXA05uPPoonJ8csEtitm9bOKQ2l0/12K/Auzz9/jKSkbOrV87BmOBHxego7UkRmZiYnThzn+uvfITIy3q3X3r8/hTlzBpKZmem2sJORAQ8/XAeYS04OREeblZCjotxyefmD0uh+y8/34e23c8jLq8GcOdt54AG3XFZExEVhR4oVGRnv9u4Vdzp50qybM24cHDoUDuTTvHkm114bjb/+ry517u5+i49P58cfY/joo0iFHRFxO62zI16loADmzDEL0o0YYVbfbdz4ONCOxMTdCjpeKj4+Eyhg5coQ15grERF3UdgRr3DqFPz3v3DJJaabassWiIiAV16Bt97aAmhHSW8WEpIHzAdg+nR7axER5ylR2KlXrx4HDhw44/2srCzq1at33teZOHEil112GVWqVCEqKoq+ffuSmppa5JycnBySkpKoVq0alStXpn///uzbt6/IOWlpafTu3ZuKFSsSFRXF6NGjOXXqVEluTTzM3r3w1FNQrx7cdJNZILBKFfjnP82sq+HDUWuOY0wDYOZMs42EiIi7lCjs7Nixg/z8/DPez83NZffu3ed9nWXLlpGUlMTKlStZuHAhJ0+epFu3bhw7dsx1zsiRI/n888/58MMPWbZsGXv27KFfv36u4/n5+fTu3Zu8vDy+++473nzzTWbNmsX48eNLcmviATIyzF94vXpBzZowdizs2mVacsaNgx074MknzdYP4iTziInJ5eBBsyCkiIi7XNC/iT/77DPX8wULFhD6u79t8vPzWbx4MXXq1Dnv682fP7/I61mzZhEVFUVycjIdOnTg8OHDvPHGG8yePZvOnTsDMHPmTOLj41m5ciXt27fnq6++YvPmzSxatIjo6GhatWrFE088wZgxY3jssccIDAy8kFsUm6SmwqefwmefwXffFd0r6S9/gTvvhFtu0cadzlZAv34HeOWVWKZNg8GD7a5HRJzigsJO3759AfDx8WHIkCFFjgUEBFCnTh2ee+65Ehdz+PBhAMLDwwFITk7m5MmTdO3a1XVOkyZNiIuLY8WKFbRv354VK1bQvHlzoqOjXed0796d4cOHs2nTJi655JIzPic3N5fc3FzX6+zs7BLXLCVTUGBWOv74YxNytm4tevzSS+Haa03AadTInhql7F13XSavvRbLypWwbh20amV3RSLiBBcUdgoKCgCoW7cua9asISIiwm2FFBQUcP/993P55ZfTrFkzANLT0wkMDCQsLKzIudHR0aSnp7vO+X3QKTxeeKw4EydO5PHHH3db7XJ+zP8+nXj66Zp8+63ZHqBQQAB06gTXXQd9+kCtWnZVKXaKiDhFv35mMPq0afDqq3ZXJCJOUKIxO7/88otbgw5AUlISGzdu5P3333frdYszduxYDh8+7Hrs2rWr1D+zPDt0CBYvhtmzmwFL+O9/o9izxww0vuUW+OADs2HnggXw978r6JR3w4ebr+++C2p0FRF3KPE8lsWLF7N48WIyMjJcLT6FZsyYcUHXGjFiBHPnzmX58uXUrFnT9X5MTAx5eXlkZWUVad3Zt28fMTExrnNWr15d5HqFs7UKz/mjoKAggoKCLqhGuXB798L//R9s3lw4BicQyOS662DYsAi6dAH9Z5A/uuoqiI+HlBR4+21ISrK7IhHxdiVq2Xn88cfp1q0bixcvJjMzk0OHDhV5nC/LshgxYgRz5sxhyZIl1K1bt8jx1q1bExAQwOLFi13vpaamkpaWRmKiWao+MTGRDRs2kJGR4Tpn4cKFhISEkJCQUJLbk4t06JCZTfPaa7Bpkwk69etD164/A7GMH59Gr14KOlI8H5/TrTvTphUdrC4iUhIlatmZPn06s2bNYtCgQRf14UlJScyePZtPP/2UKlWquMbYhIaGEhwcTGhoKHfccQejRo0iPDyckJAQ7rnnHhITE2nfvj0A3bp1IyEhgUGDBjFp0iTS09N55JFHSEpKUutNGcvPh+XLTWtO4coEzZvD5ZebPav27s0CTtpZoniJwYPhoYdMWP7mG+jQwe6KRMSblSjs5OXl8Ze//OWiP3zaNLOIWMeOHYu8P3PmTG677TYAJk+ejK+vL/379yc3N5fu3bvzyiuvuM718/Nj7ty5DB8+nMTERCpVqsSQIUOYMGHCRdcn5y89HT75BArXe6xXz+w8/oex4yLnJTQUbr0VXn/dtO4o7IjIxShR2LnzzjuZPXs248aNu6gPt86jfbpChQpMnTqVqVOnnvWc2rVrM2/evIuqRUpu3TqYO9e05gQHQ+/ekJBguiNESmr4cBN2/vc/E6IVnEWkpEoUdnJycnjttddYtGgRLVq0ICAgoMjx559/3i3FiWcrKIAvv4TvvzevGzY0a+NUrmxvXeIMl14Kbdua9ZhmzDAraYuIlESJws769etp9dtqXxs3bixyzEf/nC8XTp6Ejz46vRhgx46mq0H/+cWdhg83YefVV+HBB8HPz+6KRMQblSjsLF261N11iBfJyYH33oO0NLMJZ//+0KSJ3VWJE910E4waBTt3wvz5potURORClWjquZRfublmsbe0NDN1fNAgBR0pPcHB8NtcBX6bzyAicsFK1LLTqVOnc3ZXLVmypMQFiec6edK06Pz6q9mQc8gQOMu6jSJuc/fdMHkyzJtnQnZcnN0ViYi3KVHLTqtWrWjZsqXrkZCQQF5eHmvXrqV58+burlE8QEGBGaOzcycEBsLAgQo6UjYaNTL7plkWvPGG3dWIiDcqUcvO5MmTi33/scce4+jRoxdVkHimr74yg5H9/WHAAKhRw+6KpDwZNgyWLjVhZ9w48/+hiMj5cuuvjIEDB9K2bVueffZZd15WbLZmDaxaZZ737Xvx3QgpKSkXXVNpXk88z/XXQ7VqsHu3We6gTx+7KxIRb+LWsLNixQoqVKjgzkuKzXbuNH+5AHTuDE2blvxaR4/uBXwYOHCgW2o78/pHSuW6Yr+gIDNQ+bnnzJ5rCjsiciFKFHb69etX5LVlWezdu5fvv//+oldVFs9x9KgZp2NZZo+rK664uOvl5GQBFp06vUzDhonuKBGAbdvmsXTpOHJyctx2TfE8Q4easDNvHuzaBbVq2V2RiHiLEoWd0NDQIq99fX1p3LgxEyZMoFu3bm4pTOxVUGCW6T96FCIj4Zpr3LdgYNWqDahe/VL3XAzIzFQ3llP8WZdk69YNSU6uwpNP7mHYsPTzvm5ERARxmsYlUm6VKOzMnDnT3XWIh/nhhxh27DAzr2680XwVKS3n38V5CzCbV189xauvXgYUnNf1g4MrsmVLigKPSDl1UWN2kpOTXf8Sa9q0KZdccolbihK7tWXt2uqAWbE2IsLmcsTxzreL89QpH9599xS5uXH06JFKXFz2n157//4U5swZSGZmpsKOSDlVorCTkZHBzTffzNdff01YWBgAWVlZdOrUiffff5/IyEh31ihl6PhxX+AdLMuHZs3MWB2RsnI+XZyXXAIrV8IvvzSgXbsyKkxEvFqJFhW85557OHLkCJs2beLgwYMcPHiQjRs3kp2dzb333uvuGqUMvfBCDaAhlSrl0auXNvYUz3Ppb1lo61bI/vOGHRGRkoWd+fPn88orrxAfH+96LyEhgalTp/Jl4Txl8Tpffw0ffWRa5Tp23ElwsL31iBQnMtKs9WRZsG6d3dWIiDcoUdgpKCggICDgjPcDAgIoKDi/AYPiWY4fhzvvLHz1KjVqaM0a8VytW5uva9eamYMiIudSorDTuXNn7rvvPvbs2eN6b/fu3YwcOZIuXbq4rTgpO48+Ctu3Q1RUHvCg3eWInFN8vNmM9vBh+Plnu6sREU9XorDz8ssvk52dTZ06dahfvz7169enbt26ZGdn89JLL7m7Rill69ebXaUB/vnPNEADIcSzBQRAixbmeXKyvbWIiOcr0WysWrVqsXbtWhYtWsSWLVsAiI+Pp2vXrm4tTkpfQQHcfTfk58MNN8CVVyroiHdo3RpWr4bUVDhyBKpUsbsiEfFUF9Sys2TJEhISEsjOzsbHx4err76ae+65h3vuuYfLLruMpk2b8s0335RWrVIKZsyAFSugcmWYMsXuakTOX1SU2TJCA5VF5M9cUNiZMmUKQ4cOJSQk5IxjoaGh3HXXXTz//PNuK05K18GDMGaMef7441Cjhr31iFyowmnoP/xgQo+ISHEuKOz8+OOP9OjR46zHu3XrRrI60L3GhAkm8DRrBloeSbxRQoLZyuTQIdi50+5qRMRTXVDY2bdvX7FTzgv5+/uzf//+iy5KSl9qKkydap4//zz4X9TGISL2CAyEpk3Nc3VlicjZXFDYqVGjBhs3bjzr8fXr11O9evWLLkpK3+jRcOqU2fvq6qvtrkak5Aq35Nu8GXJz7a1FRDzTBYWdXr16MW7cOHJycs44duLECR599FGuueYatxUnpWPxYvj8c9Oa8+yzdlcjcnFq1oRq1eDkSdi0ye5qRMQTXVDnxSOPPMLHH39Mo0aNGDFiBI0bNwZgy5YtTJ06lfz8fB5++OFSKVTcIz8fRo0yz4cPhyZN7K1H5GL5+ECrVibEr1t3etCyiEihCwo70dHRfPfddwwfPpyxY8di/Tb9wcfHh+7duzN16lSio6NLpVBxj5kzzSKCYWFm1WQRJ2jZEpYsgV27IDMTIiLsrkhEPMkFD0utXbs28+bN49ChQ/z0009YlkXDhg2pWrVqadQnbnTkCDzyiHk+frxp+hdxgipVoEED2LbNtO5ofVMR+b0Sz8GpWrUql112mTtrkVL29NOwbx80bAhJSXZXI+Jel1xiws6PP0LnzuBbos1wRMSJ9OugnMjIOL1C8tNPmym7Ik7SqBFUrAhHj5pNbUVECinslBMTJ8KxY3DZZdC3r93ViLifnx80b26e//CDvbWIiGdR2CkHdu2CadPM83/9y8xeEXGiVq3M19RUOH7c1lJExIMo7JQDTzxhFlvr0EELCIqzxcRA9epQUADnWP9URMoZbRLgxdLS0sjMzDznObt2BTFjRgLgw+DBqfzww7Fznp+SkuLGCkXKXosWsHevWWKhbVu7qxERT6Cw46XS0tJo0iSeEyf+rK3+baApMI877+x93tc/evTIxZQnYpvmzeGrr2D3brPmjoiIwo6XyszM5MSJ41x//TtERsYXe87BgxX46CNzrF+/ukRE/PmO9Nu2zWPp0uK3BBHxBpUqnV5zZ/16iC/+j4eIlCMKO14uMjKe6tWLXx9/+XLzNT4emjc/v9/4mZnqxhLv16KFCTsbNmhLFBHRAGXH2rsXtmwxzzt1srcWkbLWuLFZSyorC9LTK9ldjojYzNaws3z5cvr06UNsbCw+Pj588sknRY7fdttt+Pj4FHn06NGjyDkHDx5kwIABhISEEBYWxh133MHRo0fL8C480zffmK/NmkFkpL21iJS1gABISDDPt23Tvigi5Z2tYefYsWO0bNmSqVOnnvWcHj16sHfvXtfjvffeK3J8wIABbNq0iYULFzJ37lyWL1/OsGHDSrt0j5aRAYWTqq680t5aROzSooX5+vPPYUCQnaWIiM1sHbPTs2dPevbsec5zgoKCiImJKfZYSkoK8+fPZ82aNbRp0waAl156iV69evHss88SGxvr9pq9QWGrTnw8REXZW4uIXerUgZAQyM72B66xuxwRsZHHj9n5+uuviYqKonHjxgwfPpwDBw64jq1YsYKwsDBX0AHo2rUrvr6+rFq16qzXzM3NJTs7u8jDKQ4cgE2bzHO16kh55uNzevsIGGRnKSJiM48OOz169OCtt95i8eLFPP300yxbtoyePXuSn58PQHp6OlF/aLrw9/cnPDyc9PT0s1534sSJhIaGuh61atUq1fsoS99+C5ZlNkWsXt3uakTs1bJl4bNeHDrkZ2cpImIjjw47N998M9deey3Nmzenb9++zJ07lzVr1vD1119f1HXHjh3L4cOHXY9du3a5p2CbZWXBjz+a52rVETGD8yMijgMBLFxY1e5yRMQmHh12/qhevXpERETw008/ARATE0NGRkaRc06dOsXBgwfPOs4HzDigkJCQIg8nKGzVqVcPata0uxoRz9Cwoen6/uILzcoSKa+8Kuz8+uuvHDhwgOq/9c8kJiaSlZVFcvLplYGXLFlCQUEB7dq1s6tMW2Rnw7p15nmHDraWIuJR6tc/BOSzcWMlfv7Z7mpExA62zsY6evSoq5UG4JdffmHdunWEh4cTHh7O448/Tv/+/YmJiWH79u08+OCDNGjQgO7duwMQHx9Pjx49GDp0KNOnT+fkyZOMGDGCm2++udzNxPruO8jPh9q1zUNEjIoVTwFLgKt5/vnd/O1v+9x27YiICOLi4tx2PREpHbaGne+//55Ov1ved9SoUQAMGTKEadOmsX79et58802ysrKIjY2lW7duPPHEEwQFnV4z491332XEiBF06dIFX19f+vfvz4svvljm92KnEydg7Vrz/Ior7K1FxNMcPboX+Bi4mqlTDzJ1amu3XTs4uCJbtqQo8Ih4OFvDTseOHbEs66zHFyxY8KfXCA8PZ/bs2e4sy63S0tLILIWtl1NSTu9htWYNnDwJ0dFQv77bP0rEq+XkZAH/w8fnNSyrOTfcsInw8Ivf6Hb//hTmzBlIZmamwo6Ih9NGoKUoLS2NJk3iOXHieKl9xuHDR1m92jz/y1/M2iIi8keHiYnJZO/eaNLTE2ja1O56RKQsKeyUoszMTE6cOM71179DZOT57Tp+vrZtm8fSpePYurUax46ZlWL1C1zk7GrVSmfv3mg2bYLOnfUPA5HyRGGnDERGxlO9+qVuvWZmZgrgw7ZtdQBITAQ/rZkmclYxMRkEBMChQ7B7t5ZnEClPvGrqufzRtRw9WokKFeBS92YpEcfx9y+gSRPzfONGe2sRkbKlsOPVHgSgTRsIDLS5FBEv0KyZ+bppExQU2FuLiJQdhR0vdeBAJPAXfH0LKGfrJ4qUWP36UKECHD0KO3bYXY2IlBWFHS+1dasZ8BwXt4fKlW0uRsRL+PlBQoJ5rq4skfJDYccLHTgAe/fWAgpo2PAXu8sR8SqFXVkpKXDqlL21iEjZUNjxQqtWFT6bS5UqpbeGj4gT1a4NlStDTg5s3253NSJSFhR2vExOzukNP+EFGysR8U6+vqfXpNq82d5aRKRsKOx4mR9+MFtDhIRkYTY3FJELVRh2tmxRV5ZIeaCw40UKCnBtDVG//hZ7ixHxYjVrQpUqkJenriyR8kBhx4ts3QpZWRAcDLVq7bC7HBGv5eNzelbWpk321iIipU9hx4sUDky+9FLw98+3txgRL1fYlZWaqq4sEadT2PES+/aZRdB8fOCyy+yuRsT71axpNtDNy4OffrK7GhEpTQo7XqKwVSc+HkJD7a1FxAl+35WlWVkizqaw4wWOH4cNG8xzbQ0h4j6FYSc11cxyFBFnUtjxAsnJZkxB9epQq5bd1Yg4x++7sjQrS8S5FHY8XEEBfP+9ed6unWl6FxH30KwskfJBYcfDbdsG2dlmunnh7BERcZ/CP1dbt6orS8SpFHY8XGGrTqtW4O9vaykijlSjhhn0r1lZIs6lsOPBDh06/cu3TRt7axFxKs3KEnE+hR0PlpxsvtarB+Hh9tYi4mSalSXibAo7HurUKbPpJ6hVR6S0FXZlnTypriwRJ1LY8VApKWZ9nSpVoHFju6sRcTZ1ZYk4m8KOhyocmHzppeCr/0oipe73e2WpK0vEWfTXqAfKyIC0NPOvzUsvtbsakfIhNlZdWSJOpbDjgQpbdRo3Nqu7ikjp0wKDIs6lsONh8vJg/XrzXAOTRcqWFhgUcSaFHQ+zaRPk5pqp5vXq2V2NSPkSGwthYSbobNtmdzUi4i4KOx5m7Vrz9ZJLtA+WSFnTrCwRZ1LY8SD798Ovv5pfuK1a2V2NSPmkriwR51HY8SCFrTqNGkHlyvbWIlJeVa+uriwRp1HY8RD5+acHJmu6uYh9NCtLxHkUdjxEaqpZMblyZWjQwO5qRMq3wq6sbdvMDEkR8W4KOx6icB+sVq20YrKI3dSVJeIs+mvVAxw+fHrF1ksusbcWETFdWYWtO+rKEvF+CjseYN0687VOHbO+jojY7/ddWbm59tYiIhfH1rCzfPly+vTpQ2xsLD4+PnzyySdFjluWxfjx46levTrBwcF07dqVbX9oUz548CADBgwgJCSEsLAw7rjjDo4ePVqGd3FxLOt0F5YGJot4jpgY84+PU6fMmDoR8V62hp1jx47RsmVLpk6dWuzxSZMm8eKLLzJ9+nRWrVpFpUqV6N69Ozk5Oa5zBgwYwKZNm1i4cCFz585l+fLlDBs2rKxu4aL9/LPpxqpQAZo0sbsaESnk4wPNmpnn6soS8W7+dn54z5496dmzZ7HHLMtiypQpPPLII1x33XUAvPXWW0RHR/PJJ59w8803k5KSwvz581mzZg1tfttI6qWXXqJXr148++yzxMbGltm9lFRhq07z5hAQYG8tIlJU06awfLkZU5eTY/5RIiLex2PH7Pzyyy+kp6fTtWtX13uhoaG0a9eOFStWALBixQrCwsJcQQega9eu+Pr6smrVqjKv+UKdOAFbtpjnGpgs4nmioiAyEgoKTv9ZFRHv47FhJz09HYDo6Ogi70dHR7uOpaenExUVVeS4v78/4eHhrnOKk5ubS3Z2dpGHHTZtMosJRkWZ8QEi4nk0K0vE+3ls2ClNEydOJDQ01PWoVauWLXX8+KP52rKlNv0U8VSF43Z+/tks/Cki3sdjw07Mb00d+/btK/L+vn37XMdiYmLIyMgocvzUqVMcPHjQdU5xxo4dy+HDh12PXbt2ubn6P3fgwOlNP1u0KPOPF5HzVK2aaXktKICUFLurEZGS8NiwU7duXWJiYli8eLHrvezsbFatWkViYiIAiYmJZGVlkZyc7DpnyZIlFBQU0K5du7NeOygoiJCQkCKPslbYqtOggTb9FPF06soS8W62zsY6evQoPxUuHYwZlLxu3TrCw8OJi4vj/vvv51//+hcNGzakbt26jBs3jtjYWPr27QtAfHw8PXr0YOjQoUyfPp2TJ08yYsQIbr75Zo+eiWVZpzf9bNnS3lpE5M81bQqLF8OOHXD0qP6BIuJtbA0733//PZ06dXK9HjVqFABDhgxh1qxZPPjggxw7doxhw4aRlZXFFVdcwfz586nwu/mf7777LiNGjKBLly74+vrSv39/XnzxxTK/lwuxY4dZWycoCBo3trsaEfkzVatCjRqwezds3gxt29pdkYhcCFvDTseOHbEs66zHfXx8mDBhAhMmTDjrOeHh4cyePbs0yis1hV1YTZuCv63/BUTkfDVtasLOpk0KOyLexmPH7DhVXp75lyGYHc5FxDskJJivaWlg02oVIlJCCjtlLCUFTp40e+7UrGl3NSJyvkJDoXCVisJ/sIiId1DYKWOFXVgtWmhtHRFvUzgra+NGe+sQkQujsFOGDh+GX34xzzULS8T7NG1q/pGyezccORJodzkicp4UdspQ4XTzOnUgLMzOSkSkJCpXhtq1zfPt26vaW4yInDeFnTJiWUW3hxAR71TYlfXzzwo7It5CYaeM7N5ttogICID4eLurEZGSSkgwXVmZmRWBBnaXIyLnQWGnjKxbZ77Gx5vFBEXEO1WsCPXrF74aaGcpInKeFHbKwKlTPq49ddSFJeL9Tm/eO4hzrIsqIh5CYacMpKWFkpMDISFmcLKIeLcmTSAgIB+ox7p1lewuR0T+hMJOGdi6tRpg/jXoq5+4iNcLCIC6dbMAmDcv3N5iRORP6a/eUhfFrl0hgLqwRJykYcMDAHz1VVVycmwuRkTOSWGn1N2KZflQowZERNhdi4i4S2zsUSCNo0f9mTvX7mpE5FwUdkrdEECtOiJOY7Z7eReAt9+2tRQR+RP+dhfgZFu3BgPx+PoW0KyZcqWI87wNjGXePNi/HyIj7a5H5OKkpaWRmZnp9utGREQQFxfn9uueL4WdUjR3rhm4WLv2YYKDtdqqiPOkEB9/jJSUSnzwAYwYYXc9IiWXlpZGkybxnDhx3O3XDg6uyJYtKbYFHoWdUnLqFMyfb8JOo0YHAYUdESfq1esgKSmVePtthR3xbpmZmZw4cZzrr3+HyEj3LfW/f38Kc+YMJDMzU2HHif7xj12MHbuaWrUa2V2KiJSSHj0OMWVKLVavhtRUaNzY7opELk5kZDzVq19qdxlupYEkpcTfH7p1ywJu0do6Ig4WHn6KHj3M87fesrcWESme/hoWEblIgwebr2+9ZbqwRcSzKOyIiFyk664z62j9+it8+aXd1YjIHynsiIhcpKAguO028/y112wtRUSKobAjIuIGQ4ear/Pmwa5d9tYiIkUp7IiIuEGjRtCxIxQUwBtv2F2NiPyewo6IiJvcdZf5+sYbGqgs4kkUdkRE3OT666FaNQ1UFvE0CjsiIm6igcoinklhR0TEjYYNM181UFnEcyjsiIi4kQYqi3gehR0RETcrbN3RQGURz6CwIyLiZv36nR6oPHeu3dWIiMKOiIibBQXBnXea5y+8YG8tIqKwIyJSKpKSwM8Pvv4afvzR7mpEyjeFHRGRUlCrFtxwg3mu1h0ReynsiIiUkvvvN1/ffRcyMmwtRaRcU9gRESkl7dtDu3aQlwevvGJ3NSLll8KOiEgpGjXKfH3pJTh2zN5aRMorhR0RkVLUvz/Urw8HD2qRQRG7KOyIiJQiPz8YPdo8f/ZZOHnS3npEyiOPDjuPPfYYPj4+RR5NmjRxHc/JySEpKYlq1apRuXJl+vfvz759+2ysWETkTEOGQHS02Svrvffsrkak/PHosAPQtGlT9u7d63p8++23rmMjR47k888/58MPP2TZsmXs2bOHfv362VitiMiZKlSAkSPN84kTIT/f3npEyht/uwv4M/7+/sTExJzx/uHDh3njjTeYPXs2nTt3BmDmzJnEx8ezcuVK2rdvX9alioic1fDh8PTTsGULfPAB3Hqr3RVJeVJQAAcOwN69cPy4mSEYFARhYRAVBVWr2l1h6fL4sLNt2zZiY2OpUKECiYmJTJw4kbi4OJKTkzl58iRdu3Z1ndukSRPi4uJYsWLFOcNObm4uubm5rtfZ2dmleg8iIiEh8MAD8MgjMGEC3HSTGc8j4m7HjsGaNbBiBfzwA2zaBNu2nXu8WGQkxMU1BCawZ09loqKc9f+nR4eddu3aMWvWLBo3bszevXt5/PHHufLKK9m4cSPp6ekEBgYSFhZW5Huio6NJT08/53UnTpzI448/XoqVi4ic6Z574PnnITXVjN0ZONDuisQJLAu2boV588xj+XLTcvNHPj4QEQGVK0NAgDknK8s89u+H/furAOOYOxcWL4ZmzeDSS6GYzhWv49Fhp2fPnq7nLVq0oF27dtSuXZv//ve/BAcHl/i6Y8eOZVTh4heYlp1atWpdVK0iIn8mJAT+8Q/45z9N687NN4O/R/8WFk+UlpbG/v2ZbNkSzIIF4SxdGsqvv1Yock5UVB4tWhyjadNjNGiQQ926OURE5BEQcOb1jh/3ZefOIL7++jCvv76dChVu5MSJANasMS1E9etDhw4QF1dGN1gKvOqPWVhYGI0aNeKnn37i6quvJi8vj6ysrCKtO/v27St2jM/vBQUFERQUVMrVioicacQI07qzbRvMmAHDhtldkXiTZcv20LXrW5w6dQPQ5HdHcoHlwDxgHhkZW1m0CBYtuvDP6Nu3Jn5+V7FuHWzeDNu3m0d8PHTrZsb5eBuvCjtHjx5l+/btDBo0iNatWxMQEMDixYvp378/AKmpqaSlpZGYmGhzpSIixatSBcaNg/vug0cfNQOVK1e2uyrxZCdOwP/+B//5DyxfHgs8AoCfXwG1ax+mfv1D1KyZTUBANWDQb48Lt23bPJYuHUdeXg7Nm0ODBnDoEHz7rRn7k5Jiuss6dYLERPD1+Pncp3l02PnHP/5Bnz59qF27Nnv27OHRRx/Fz8+PW265hdDQUO644w5GjRpFeHg4ISEh3HPPPSQmJmomloh4tLvvNjuh//yzaeUZP97uisQTbdhgAs7bb5txNQC+vhYFBfPp2DGe9u3rEBRUFXDPVKrMzJQz3qtaFfr0MXu8zZ8Pv/xiWou2boW+fb1nFpdH57Jff/2VW265hcaNG3PjjTdSrVo1Vq5cSWRkJACTJ0/mmmuuoX///nTo0IGYmBg+/vhjm6sWETm3wECz3g7ApEnwJ3MqpBzJyYFZs0zLSYsWZk+1rCyoXduM85o7dyPQi0aNDlKWozGiomDQILj2WvP/b1oavPaa6Y71Bh7dsvP++++f83iFChWYOnUqU6dOLaOKRETc469/heeeg9WrzYDlGTPsrkjslJ4O06aZx/795j1/fxMuhg2Drl3NVPC1a+3bb8THBy65BOrUgY8/hl9/hdmzTbfWlVea457Ko1t2REScysfHdGUBzJwJK1faW4/YY+NGuO220y03+/dDzZqm5e/XX81Yne7dPWvNm6pVzRYorVub10uXwmefefbK4Ao7IiI2ad8ebr/dPE9K8uy/LMS9kpOhXz9o3hzefNOseZOYaFbX/vlneOghs5+ap/L3h2uugd69TXBft86sHVXc+j6eQGFHRMRGTz0FoaGwdq0ZAyHOtmIF9OoFbdrAnDkmKPTvb1r2vvsObryRYtfC8VRt2pj1ogICzPT0d9/1zMCjsCMiYqOoKHjiCfP8oYdM14U4T0qKmb30l7/Al1+aadsDB5purI8+MrOdvFWjRjB4sNlrKy3NBJ7f7cjkETx6gLKISHnw97+bgZ4rV5oNQz/7zLMHe8qfS0tLIzMzk/37/Xnttep88kkEBQU++Ppa9OlzgNtv30etWrnk5JhWvfOVknLm9HBPULOmma319tunA8+AAZTpjLFzUdgREbGZnx+88YaZ6TJ3rhm3cfPNdlclJZWWlkbjxi3IyUkC/glU+u3IJxQUjOXTT7fw6acX9xlHjx65yCrdr0YN08Lz9tuwaxe8847n7P+msCMi4gESEsyO6OPHmy0lOnSA2Fi7q3K+whYYd5oz5wA5Od8BCQBERR2jXbtfqV49Dnj3oq5duMpxTk7OxRdaCmJjT7fw/PqraeHp2tX+ETMKOyIiHmLMGPjkE9OtcdttZsVab1qS39ukpaXRpEk8J04cd9MVqwGTgL8BEBSUR69egTRvXgkfn8Zu+YTiVjn2NLGxpoXnrbdMC8/ChXUBe0ddK+yIiHiIwEDzL+FLL4WFC806PCNH2l2Vc2VmZnLixHGuv/4dIiPjL+paO3aEsnx5HDk5hX+pT+fqqxvSokWXiy/UC1WvbvZ9My08ocDbti6toLAjIuJBmjQx+2UNH25mZ115pZneK6UnMjKe6tUvLdH35uaaFrh168zrqCiIj1/AsmXDCQyc774ivVCtWnDTTTB7dgEFBTexdOnPXHaZPbWogVRExMPcdRdcd51Zr+SGG+DAAbsrkuLs2gWvvno66Fx+udnaoVo1944B8mb160PnzjuAh+nSJcu2OhR2REQ8jI+P2Qyyfn3YudNM4dXqyp6joAC+/tps83HokFkU8rbbTu9fJUXVq5cF/NvW5RQUdkREPFBYmNlsMTgYFiwwm4WK/Y4fN2siLVsGlmV2Jr/7brO3lXguhR0REQ/VooVZfwdg0qTTz8Ueu3ebLT22bzd7Q/XtC9dfDxUq2F2Z/BkNUBYR8WC33AJbtpgdse++G+rUgS7lc4KPbSwLvv/eDEQuKIDwcLOHlSdv1ClFqWVHRMTDPfaYWVH51CnTkpCcbHdF5Ud+Pnz+OcybZ4JOkyYwdKiCjrdR2BER8XA+PmYwbKdOcOQI9OhhWnukdB07ZhbG++EH89+ga1fToqNuK++jbiwRkYtQWhszRkREEBcX53pdoQJ8+il07my6VLp2haVLoWHDUvn4cm/fPnjvPTh82Gxm2b+/ftbeTGFHRKQEjh7dC/gwsJR2OgwKqsD//vcR1atXL/L+U0/5MWxYI37+OZjLL89j+vRt1KmTe97X/WOIkjNt2WJmwp08acbn3HwzREbaXZVcDIUdEZESyMnJAiw6dXqZhg0T3XrtnTu/YcGCkVxzzTVnOSMSWML+/c3o3z8c6AZsPK9rBwdXZMuWFAWeYlgWfPONaTEDqFfPLOoYHGxvXXLxFHZERC5C1aoNSrzVwNmYzR7PHaROnCjgiy9OcPBgdQIDf6BHj+3ExBw753X3709hzpyBZGZmKuz8wcmT8NlnsPG3zNi2LXTvro1YnUJhR0TEQ/1ZkLrzTjOuZNcuf+bNa8z110NCQhkW6BBHjwbw+eewd68JN716QevWdlcl7qTMKiLipYKDYdAgaNTITEv/8ENYssR0x8j5SmTOnCbs3QsVK8LgwQo6TqSwIyLixQICzM7S7dub1998Ax98YHbjlnP77LNwYCknTgQQHW3Wz9G2D86ksCMi4uV8fc34kr59zUaUqalma4mDB+2uzDOdOgWjRsHjj9cBgqhT5xB/+5vZj0ycSWFHRMQhWraE22+HKlVg/36zj9P69erW+r1Dh8yYnMmTC995jKuv/oXAQDurktKmsCMi4iA1apjumFq1TFfWnDnwv//BiRN2V2a/5GRo0wYWLjTjc55++mfgcXx87K5MSptmY4mIOEyVKnDbbfDtt/D117BpE+zaBVdeWdnu0mxhWfDKK6brKi/PjMv55BMoKMiyuzQpI2rZERFxIF9f6NAB7rjDrAKcnQ1ffNEIeIXsbD+7yyszhw+bAdwjRpigc911Zq+rVq3srkzKksKOiIiD1agBd931++nUw+nXL4FZs5w/lue778x9f/gh+PubcTpz5kDVqnZXJmVNYUdExOECA+Gaa+Caa7YCmzh0KIDbbzctPxs22F2d+x0/brqsrrgCtm833Vbffgv334/G55RTCjsiIuVEbOxRoBX33fcrFSuaANCqFQwZAr/8Ynd17rF8uZmVNnmyabkaMsR0W7VrZ3dlYieFHRGRcuUUgwdnkJJiNrksKIC33oLGjSEpyWyZ4I0OHIDhw+Gqq+Cnn6BmTZg3D2bNUreVKOyIiJRLcXFmLMvq1XD11WYjzFdegfr14Z57TGDwBrm58OKL0LAhTJ9u3rvzTrOhZ8+e9tYmnkNhR0SkHLvsMvjqK7OnVmKiWY/n5ZfNflvXXQdLl3rmQOaTJ2HGDFPnffeZxQJbtDD1/uc/EBpqd4XiSRR2RESETp3g//7PLLjXq5cJOJ99Bp07mxAxaZJZq8duWVnw3HNQr56ZVp+WBtWrm1ad5GTo2NHuCsUTKeyIiAhgZip17QpffAFbtpgxMMHBpktozBgzq6ljR9Nysm9f2dWVn28WRxwyBGJj4R//gF9/hehoePZZM+PqrrvM9HKR4ijsiIjIGRo3NmN4du+GV18109QtC5Ytg2HDICbGzHp64AH48ks4etS9n5+VZdbEuftus1ZQp05mIPWJE9C0qQlcO3aYzw8Odu9ni/M4JgdPnTqVZ555hvT0dFq2bMlLL71E27Zt7S5LRMSrVa1qws2wYabL6L334L//hbVrzSaj69fD88+bVqEGDaB589OPWrUgKgoiI6FSpTOvbVlw5IiZAfbzz2a39o0bzaDpTZvMTLHf19Gvn+m6at9e6+XIhXFE2Pnggw8YNWoU06dPp127dkyZMoXu3buTmppKVFSU3eWJiDhCXJzpzhozxuyqvmQJLFpkxvns3AnbtpnHxx+f+b3BwRAWBn6/7VRx/DgcO2ZmU51N48Zmpljv3mbskHYml5JyRNh5/vnnGTp0KLfffjsA06dP54svvmDGjBk89NBDNlcnIuI8kZFmz6mbbjKv9+0zqzGvX2++btwI6ekmFOXmmu6ns+28HhJiglTjxtCkiZkh1ratGXgs4g5eH3by8vJITk5m7Nixrvd8fX3p2rUrK1assLEyEZHyIzraPLp2Lfq+ZZnxPPv3m005Lct0T1WsaLq2IiPNc5HS5PVhJzMzk/z8fKKjo4u8Hx0dzZYtW4r9ntzcXHJ/13Z6+PBhALKzs91a29HfRuzt2ZNMXp57R+/t35/y29cN7NzpvtF5pXXd0ry2avb+a6vmsrl2ZmYqAMnJya7fT+7k6+tLwe8H2pzD8eOQmWm6v9x53QuRmmp+Hu7+He2N/2+U5rUL/787evSo2/+eLbye9WeLQVlebvfu3RZgfffdd0XeHz16tNW2bdtiv+fRRx+1AD300EMPPfTQwwGPXbt2nTMreH3LTkREBH5+fuz7w6IP+/btIyYmptjvGTt2LKNGjXK9Ligo4ODBg1SrVg2f3w3xz87OplatWuzatYuQkJDSuQEPV95/Brr/8n3/oJ9Beb9/0M/Ak+/fsiyOHDlCbGzsOc/z+rATGBhI69atWbx4MX379gVMeFm8eDEjRowo9nuCgoIICgoq8l5YWNhZPyMkJMTj/gOXtfL+M9D9l+/7B/0Myvv9g34Gnnr/oeexN4jXhx2AUaNGMWTIENq0aUPbtm2ZMmUKx44dc83OEhERkfLLEWHnpptuYv/+/YwfP5709HRatWrF/Pnzzxi0LCIiIuWPI8IOwIgRI87abVVSQUFBPProo2d0eZUn5f1noPsv3/cP+hmU9/sH/QyccP8+lvVn87VEREREvJc2AhURERFHU9gRERERR1PYEREREUdT2BERERFHU9g5h6lTp1KnTh0qVKhAu3btWL16td0llYqJEydy2WWXUaVKFaKioujbt69rz5hCOTk5JCUlUa1aNSpXrkz//v3PWLXaKZ566il8fHy4//77Xe+Vh/vfvXs3AwcOpFq1agQHB9O8eXO+//5713HLshg/fjzVq1cnODiYrl27sm3bNhsrdp/8/HzGjRtH3bp1CQ4Opn79+jzxxBNF9ttx2v0vX76cPn36EBsbi4+PD5988kmR4+dzvwcPHmTAgAGEhIQQFhbGHXfcUSp7bpWGc93/yZMnGTNmDM2bN6dSpUrExsYyePBg9uzZU+QaTr3/P7r77rvx8fFhypQpRd73pvtX2DmLDz74gFGjRvHoo4+ydu1aWrZsSffu3cnIyLC7NLdbtmwZSUlJrFy5koULF3Ly5Em6devGsWPHXOeMHDmSzz//nA8//JBly5axZ88e+vXrZ2PVpWPNmjW8+uqrtGjRosj7Tr//Q4cOcfnllxMQEMCXX37J5s2bee6556hatarrnEmTJvHiiy8yffp0Vq1aRaVKlejevTs5OTk2Vu4eTz/9NNOmTePll18mJSWFp59+mkmTJvHSSy+5znHa/R87doyWLVsyderUYo+fz/0OGDCATZs2sXDhQubOncvy5csZNmxYWd3CRTnX/R8/fpy1a9cybtw41q5dy8cff0xqairXXnttkfOcev+/N2fOHFauXFnsdgxedf8XvxWnM7Vt29ZKSkpyvc7Pz7diY2OtiRMn2lhV2cjIyLAAa9myZZZlWVZWVpYVEBBgffjhh65zUlJSLMBasWKFXWW63ZEjR6yGDRtaCxcutK666irrvvvusyyrfNz/mDFjrCuuuOKsxwsKCqyYmBjrmWeecb2XlZVlBQUFWe+9915ZlFiqevfubf3tb38r8l6/fv2sAQMGWJbl/PsHrDlz5rhen8/9bt682QKsNWvWuM758ssvLR8fH2v37t1lVrs7/PH+i7N69WoLsHbu3GlZVvm4/19//dWqUaOGtXHjRqt27drW5MmTXce87f7VslOMvLw8kpOT6dq1q+s9X19funbtyooVK2ysrGwcPnwYgPDwcACSk5M5efJkkZ9HkyZNiIuLc9TPIykpid69exe5Tygf9//ZZ5/Rpk0b/vrXvxIVFcUll1zCf/7zH9fxX375hfT09CI/g9DQUNq1a+eIn8Ff/vIXFi9ezNatWwH48ccf+fbbb+nZsyfg/Pv/o/O53xUrVhAWFkabNm1c53Tt2hVfX19WrVpV5jWXtsOHD+Pj4+PaR9Hp919QUMCgQYMYPXo0TZs2PeO4t92/Y1ZQdqfMzEzy8/PP2G4iOjqaLVu22FRV2SgoKOD+++/n8ssvp1mzZgCkp6cTGBh4xmap0dHRpKen21Cl+73//vusXbuWNWvWnHGsPNz/zz//zLRp0xg1ahT//Oc/WbNmDffeey+BgYEMGTLEdZ/F/Zlwws/goYceIjs7myZNmuDn50d+fj5PPvkkAwYMAHD8/f/R+dxveno6UVFRRY77+/sTHh7uuJ9JTk4OY8aM4ZZbbnFthOn0+3/66afx9/fn3nvvLfa4t92/wo4UkZSUxMaNG/n222/tLqXM7Nq1i/vuu4+FCxdSoUIFu8uxRUFBAW3atOHf//43AJdccgkbN25k+vTpDBkyxObqSt9///tf3n33XWbPnk3Tpk1Zt24d999/P7GxseXi/uXsTp48yY033ohlWUybNs3ucspEcnIyL7zwAmvXrsXHx8fuctxC3VjFiIiIwM/P74zZNvv27SMmJsamqkrfiBEjmDt3LkuXLqVmzZqu92NiYsjLyyMrK6vI+U75eSQnJ5ORkcGll16Kv78//v7+LFu2jBdffBF/f3+io6Mdff8A1atXJyEhoch78fHxpKWlAbju06l/JkaPHs1DDz3EzTffTPPmzRk0aBAjR45k4sSJgPPv/4/O535jYmLOmLBx6tQpDh486JifSWHQ2blzJwsXLnS16oCz7/+bb74hIyODuLg41+/EnTt38sADD1CnTh3A++5fYacYgYGBtG7dmsWLF7veKygoYPHixSQmJtpYWemwLIsRI0YwZ84clixZQt26dYscb926NQEBAUV+HqmpqaSlpTni59GlSxc2bNjAunXrXI82bdowYMAA13Mn3z/A5ZdffsZyA1u3bqV27doA1K1bl5iYmCI/g+zsbFatWuWIn8Hx48fx9S3669DPz4+CggLA+ff/R+dzv4mJiWRlZZGcnOw6Z8mSJRQUFNCuXbsyr9ndCoPOtm3bWLRoEdWqVSty3Mn3P2jQINavX1/kd2JsbCyjR49mwYIFgBfev90jpD3V+++/bwUFBVmzZs2yNm/ebA0bNswKCwuz0tPT7S7N7YYPH26FhoZaX3/9tbV3717X4/jx465z7r77bisuLs5asmSJ9f3331uJiYlWYmKijVWXrt/PxrIs59//6tWrLX9/f+vJJ5+0tm3bZr377rtWxYoVrXfeecd1zlNPPWWFhYVZn376qbV+/Xrruuuus+rWrWudOHHCxsrdY8iQIVaNGjWsuXPnWr/88ov18ccfWxEREdaDDz7oOsdp93/kyBHrhx9+sH744QcLsJ5//nnrhx9+cM02Op/77dGjh3XJJZdYq1atsr799lurYcOG1i233GLXLV2Qc91/Xl6ede2111o1a9a01q1bV+T3Ym5urusaTr3/4vxxNpZledf9K+ycw0svvWTFxcVZgYGBVtu2ba2VK1faXVKpAIp9zJw503XOiRMnrL///e9W1apVrYoVK1rXX3+9tXfvXvuKLmV/DDvl4f4///xzq1mzZlZQUJDVpEkT67XXXityvKCgwBo3bpwVHR1tBQUFWV26dLFSU1Ntqta9srOzrfvuu8+Ki4uzKlSoYNWrV896+OGHi/zF5rT7X7p0abF/7ocMGWJZ1vnd74EDB6xbbrnFqly5shUSEmLdfvvt1pEjR2y4mwt3rvv/5Zdfzvp7cenSpa5rOPX+i1Nc2PGm+/exrN8tESoiIiLiMBqzIyIiIo6msCMiIiKOprAjIiIijqawIyIiIo6msCMiIiKOprAjIiIijqawIyIiIo6msCMiIiKOprAjIo5022234ePjg4+PD4GBgTRo0IAJEyZw6tQpu0sTkTLmb3cBIiKlpUePHsycOZPc3FzmzZtHUlISAQEBjB071u7SRKQMqWVHRBwrKCiImJgYateuzfDhw+natSufffaZ3WWJSBlT2BGRciM4OJi8vDy7yxCRMqawIyKOZ1kWixYtYsGCBXTu3NnuckSkjGnMjog41ty5c6lcuTInT56koKCAW2+9lccee8zuskSkjCnsiIhjderUiWnTphEYGEhsbCz+/vqVJ1Ie6U++iDhWpUqVaNCggd1liIjNNGZHREREHE1hR0RERBzNx7Isy+4iREREREqLWnZERETE0RR2RERExNEUdkRERMTRFHZERETE0RR2RERExNEUdkRERMTRFHZERETE0RR2RERExNEUdkRERMTRFHZERETE0RR2RERExNEUdkRERMTR/h/bF25aUPt9XgAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Data Spliting**"
      ],
      "metadata": {
        "id": "bLOvc-HnESGk"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "X_train, X_test, Y_train, Y_test = train_test_split(X,Y,test_size = 0.2, random_state = 42)"
      ],
      "metadata": {
        "id": "psz1IxXwhMs-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(X_train.shape)\n",
        "print(X_test.shape)\n",
        "print(Y_train.shape)\n",
        "print(Y_test.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lgx_IuLg_TAr",
        "outputId": "28e6e0d1-8d4f-4adf-f15e-4f141abb87fe"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(2000, 7)\n",
            "(500, 7)\n",
            "(2000,)\n",
            "(500,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X_train"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "0dp0boV3EQVJ",
        "outputId": "cf686a54-b6b6-4f82-bfb2-216afa311176",
        "collapsed": true
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "               N           P           K  temperature   humidity        ph  \\\n",
              "2055   67.000000   41.000000   40.000000    25.848795  87.816617  7.333143   \n",
              "1961  107.000000   43.000000   18.000000    22.426733  81.534808  6.745104   \n",
              "1864    6.000000   13.000000   29.000000    27.311557  99.969060  5.832608   \n",
              "2326   43.411107   48.721325   44.226911    29.071354  51.581754  6.874288   \n",
              "461    20.000000   77.000000   23.000000    34.872487  38.837860  5.180272   \n",
              "...          ...         ...         ...          ...        ...       ...   \n",
              "1638   10.000000    5.000000    5.000000    21.213070  91.353492  7.817846   \n",
              "1095  108.000000   94.000000   47.000000    27.359116  84.546250  6.387431   \n",
              "1130   11.000000   36.000000   31.000000    27.920633  51.779659  6.475449   \n",
              "1294   11.000000  124.000000  204.000000    13.429886  80.066340  6.361141   \n",
              "860    32.000000   78.000000   22.000000    23.970814  62.355576  7.007038   \n",
              "\n",
              "        rainfall  \n",
              "2055  152.619440  \n",
              "1961   65.544758  \n",
              "1864  201.825863  \n",
              "2326   79.328939  \n",
              "461   148.250279  \n",
              "...          ...  \n",
              "1638  112.983436  \n",
              "1095   90.812505  \n",
              "1130  100.258567  \n",
              "1294   71.400430  \n",
              "860    53.409060  \n",
              "\n",
              "[2000 rows x 7 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e41f6c2a-a6da-4c58-ace3-f8e83aeb6d48\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>N</th>\n",
              "      <th>P</th>\n",
              "      <th>K</th>\n",
              "      <th>temperature</th>\n",
              "      <th>humidity</th>\n",
              "      <th>ph</th>\n",
              "      <th>rainfall</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2055</th>\n",
              "      <td>67.000000</td>\n",
              "      <td>41.000000</td>\n",
              "      <td>40.000000</td>\n",
              "      <td>25.848795</td>\n",
              "      <td>87.816617</td>\n",
              "      <td>7.333143</td>\n",
              "      <td>152.619440</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1961</th>\n",
              "      <td>107.000000</td>\n",
              "      <td>43.000000</td>\n",
              "      <td>18.000000</td>\n",
              "      <td>22.426733</td>\n",
              "      <td>81.534808</td>\n",
              "      <td>6.745104</td>\n",
              "      <td>65.544758</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1864</th>\n",
              "      <td>6.000000</td>\n",
              "      <td>13.000000</td>\n",
              "      <td>29.000000</td>\n",
              "      <td>27.311557</td>\n",
              "      <td>99.969060</td>\n",
              "      <td>5.832608</td>\n",
              "      <td>201.825863</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2326</th>\n",
              "      <td>43.411107</td>\n",
              "      <td>48.721325</td>\n",
              "      <td>44.226911</td>\n",
              "      <td>29.071354</td>\n",
              "      <td>51.581754</td>\n",
              "      <td>6.874288</td>\n",
              "      <td>79.328939</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>461</th>\n",
              "      <td>20.000000</td>\n",
              "      <td>77.000000</td>\n",
              "      <td>23.000000</td>\n",
              "      <td>34.872487</td>\n",
              "      <td>38.837860</td>\n",
              "      <td>5.180272</td>\n",
              "      <td>148.250279</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1638</th>\n",
              "      <td>10.000000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>21.213070</td>\n",
              "      <td>91.353492</td>\n",
              "      <td>7.817846</td>\n",
              "      <td>112.983436</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1095</th>\n",
              "      <td>108.000000</td>\n",
              "      <td>94.000000</td>\n",
              "      <td>47.000000</td>\n",
              "      <td>27.359116</td>\n",
              "      <td>84.546250</td>\n",
              "      <td>6.387431</td>\n",
              "      <td>90.812505</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1130</th>\n",
              "      <td>11.000000</td>\n",
              "      <td>36.000000</td>\n",
              "      <td>31.000000</td>\n",
              "      <td>27.920633</td>\n",
              "      <td>51.779659</td>\n",
              "      <td>6.475449</td>\n",
              "      <td>100.258567</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1294</th>\n",
              "      <td>11.000000</td>\n",
              "      <td>124.000000</td>\n",
              "      <td>204.000000</td>\n",
              "      <td>13.429886</td>\n",
              "      <td>80.066340</td>\n",
              "      <td>6.361141</td>\n",
              "      <td>71.400430</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>860</th>\n",
              "      <td>32.000000</td>\n",
              "      <td>78.000000</td>\n",
              "      <td>22.000000</td>\n",
              "      <td>23.970814</td>\n",
              "      <td>62.355576</td>\n",
              "      <td>7.007038</td>\n",
              "      <td>53.409060</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>2000 rows × 7 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e41f6c2a-a6da-4c58-ace3-f8e83aeb6d48')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e41f6c2a-a6da-4c58-ace3-f8e83aeb6d48 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e41f6c2a-a6da-4c58-ace3-f8e83aeb6d48');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-67f1ad2c-67a3-4d58-8bdd-26c68468b05d\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-67f1ad2c-67a3-4d58-8bdd-26c68468b05d')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-67f1ad2c-67a3-4d58-8bdd-26c68468b05d button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_438b74a6-b231-412f-a087-769b3b4cce99\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('X_train')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_438b74a6-b231-412f-a087-769b3b4cce99 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('X_train');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "X_train",
              "summary": "{\n  \"name\": \"X_train\",\n  \"rows\": 2000,\n  \"fields\": [\n    {\n      \"column\": \"N\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 36.13648596589939,\n        \"min\": 0.0,\n        \"max\": 140.0,\n        \"num_unique_values\": 379,\n        \"samples\": [\n          132.0,\n          106.5,\n          136.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"P\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 31.52237027302558,\n        \"min\": 5.0,\n        \"max\": 145.0,\n        \"num_unique_values\": 361,\n        \"samples\": [\n          35.59463056,\n          144.0,\n          68.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"K\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 311.43660529796136,\n        \"min\": -8965.0,\n        \"max\": 8521.0,\n        \"num_unique_values\": 344,\n        \"samples\": [\n          31.76354216,\n          64.56512708,\n          76.53372896\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"temperature\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.252995074955633,\n        \"min\": 8.825674745,\n        \"max\": 43.67549305,\n        \"num_unique_values\": 1998,\n        \"samples\": [\n          23.25230817,\n          21.32504158,\n          15.53834801\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"humidity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 21.25923205102326,\n        \"min\": 14.25803981,\n        \"max\": 99.98187601,\n        \"num_unique_values\": 1997,\n        \"samples\": [\n          94.54128292,\n          80.47476396,\n          23.75560241\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ph\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7433225591927071,\n        \"min\": 3.504752314,\n        \"max\": 9.93509073,\n        \"num_unique_values\": 1989,\n        \"samples\": [\n          6.231662767,\n          6.81712422,\n          5.514927264\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rainfall\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 53.436471830288944,\n        \"min\": 20.21126747,\n        \"max\": 298.4018471,\n        \"num_unique_values\": 2000,\n        \"samples\": [\n          24.20007242,\n          28.16057247,\n          184.6226709\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X_test"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "yrVGrBjgE1Ah",
        "outputId": "29b9aa12-6223-4514-b4d8-a7605b5eb35a",
        "collapsed": true
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "               N          P           K  temperature   humidity        ph  \\\n",
              "1447   83.000000   11.00000   53.000000    29.540972  92.917783  6.163921   \n",
              "1114   12.000000   19.00000   31.000000    27.253734  52.663197  5.566704   \n",
              "1064   92.000000   85.00000   51.000000    29.221186  81.081836  5.740765   \n",
              "2287  105.500000   61.10000   50.850000    12.660000  65.620000  6.190000   \n",
              "1537   13.000000  121.00000  196.000000    22.207010  93.505742  6.443383   \n",
              "...          ...        ...         ...          ...        ...       ...   \n",
              "2375   89.540234   25.53975   36.142803    22.369471  51.221987  6.981046   \n",
              "1609   13.000000   23.00000    6.000000    23.961476  90.264080  7.365338   \n",
              "596    22.000000   51.00000   16.000000    27.965837  61.349001  8.639586   \n",
              "84     67.000000   58.00000   39.000000    25.282722  80.543728  5.453592   \n",
              "2213   88.490000   66.16000   44.490000    24.440000  71.470000  7.300000   \n",
              "\n",
              "        rainfall  \n",
              "1447   21.965308  \n",
              "1114   91.873125  \n",
              "1064  108.861647  \n",
              "2287   64.000000  \n",
              "1537  120.159377  \n",
              "...          ...  \n",
              "2375  116.830576  \n",
              "1609  102.695870  \n",
              "596    70.104721  \n",
              "84    220.115671  \n",
              "2213   54.090000  \n",
              "\n",
              "[500 rows x 7 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2fa4c024-3dba-4a76-9fd9-636a9d528ee0\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>N</th>\n",
              "      <th>P</th>\n",
              "      <th>K</th>\n",
              "      <th>temperature</th>\n",
              "      <th>humidity</th>\n",
              "      <th>ph</th>\n",
              "      <th>rainfall</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1447</th>\n",
              "      <td>83.000000</td>\n",
              "      <td>11.00000</td>\n",
              "      <td>53.000000</td>\n",
              "      <td>29.540972</td>\n",
              "      <td>92.917783</td>\n",
              "      <td>6.163921</td>\n",
              "      <td>21.965308</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1114</th>\n",
              "      <td>12.000000</td>\n",
              "      <td>19.00000</td>\n",
              "      <td>31.000000</td>\n",
              "      <td>27.253734</td>\n",
              "      <td>52.663197</td>\n",
              "      <td>5.566704</td>\n",
              "      <td>91.873125</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1064</th>\n",
              "      <td>92.000000</td>\n",
              "      <td>85.00000</td>\n",
              "      <td>51.000000</td>\n",
              "      <td>29.221186</td>\n",
              "      <td>81.081836</td>\n",
              "      <td>5.740765</td>\n",
              "      <td>108.861647</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2287</th>\n",
              "      <td>105.500000</td>\n",
              "      <td>61.10000</td>\n",
              "      <td>50.850000</td>\n",
              "      <td>12.660000</td>\n",
              "      <td>65.620000</td>\n",
              "      <td>6.190000</td>\n",
              "      <td>64.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1537</th>\n",
              "      <td>13.000000</td>\n",
              "      <td>121.00000</td>\n",
              "      <td>196.000000</td>\n",
              "      <td>22.207010</td>\n",
              "      <td>93.505742</td>\n",
              "      <td>6.443383</td>\n",
              "      <td>120.159377</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2375</th>\n",
              "      <td>89.540234</td>\n",
              "      <td>25.53975</td>\n",
              "      <td>36.142803</td>\n",
              "      <td>22.369471</td>\n",
              "      <td>51.221987</td>\n",
              "      <td>6.981046</td>\n",
              "      <td>116.830576</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1609</th>\n",
              "      <td>13.000000</td>\n",
              "      <td>23.00000</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>23.961476</td>\n",
              "      <td>90.264080</td>\n",
              "      <td>7.365338</td>\n",
              "      <td>102.695870</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>596</th>\n",
              "      <td>22.000000</td>\n",
              "      <td>51.00000</td>\n",
              "      <td>16.000000</td>\n",
              "      <td>27.965837</td>\n",
              "      <td>61.349001</td>\n",
              "      <td>8.639586</td>\n",
              "      <td>70.104721</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>84</th>\n",
              "      <td>67.000000</td>\n",
              "      <td>58.00000</td>\n",
              "      <td>39.000000</td>\n",
              "      <td>25.282722</td>\n",
              "      <td>80.543728</td>\n",
              "      <td>5.453592</td>\n",
              "      <td>220.115671</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2213</th>\n",
              "      <td>88.490000</td>\n",
              "      <td>66.16000</td>\n",
              "      <td>44.490000</td>\n",
              "      <td>24.440000</td>\n",
              "      <td>71.470000</td>\n",
              "      <td>7.300000</td>\n",
              "      <td>54.090000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>500 rows × 7 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2fa4c024-3dba-4a76-9fd9-636a9d528ee0')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2fa4c024-3dba-4a76-9fd9-636a9d528ee0 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2fa4c024-3dba-4a76-9fd9-636a9d528ee0');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-407732e0-85a6-434c-93b9-63b3ab0e3d7f\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-407732e0-85a6-434c-93b9-63b3ab0e3d7f')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-407732e0-85a6-434c-93b9-63b3ab0e3d7f button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_95714bf2-6256-469c-896a-a9c2aa1ebb64\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('X_test')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_95714bf2-6256-469c-896a-a9c2aa1ebb64 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('X_test');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "X_test",
              "summary": "{\n  \"name\": \"X_test\",\n  \"rows\": 500,\n  \"fields\": [\n    {\n      \"column\": \"N\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 38.02050777385154,\n        \"min\": 0.0,\n        \"max\": 140.0,\n        \"num_unique_values\": 175,\n        \"samples\": [\n          61.0,\n          97.74145872,\n          107.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"P\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 30.763994912261644,\n        \"min\": 5.0,\n        \"max\": 144.0,\n        \"num_unique_values\": 155,\n        \"samples\": [\n          74.0,\n          52.4,\n          15.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"K\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 63.91972073603976,\n        \"min\": -45.0,\n        \"max\": 854.0,\n        \"num_unique_values\": 129,\n        \"samples\": [\n          61.76070355,\n          16.0,\n          43.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"temperature\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.050202618833655,\n        \"min\": 9.535585543,\n        \"max\": 41.31330062,\n        \"num_unique_values\": 500,\n        \"samples\": [\n          27.87317436,\n          29.1400919,\n          26.54986394\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"humidity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 20.85567382153575,\n        \"min\": 14.33847406,\n        \"max\": 98.08951196,\n        \"num_unique_values\": 500,\n        \"samples\": [\n          91.14849627,\n          80.1190228,\n          72.89187265\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ph\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7392849035167548,\n        \"min\": 3.5253661,\n        \"max\": 9.926212291,\n        \"num_unique_values\": 500,\n        \"samples\": [\n          6.484799661,\n          6.28236237,\n          5.787268394\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rainfall\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 53.793098634348866,\n        \"min\": 20.39020503,\n        \"max\": 298.5601175,\n        \"num_unique_values\": 500,\n        \"samples\": [\n          24.05207925,\n          90.45142867,\n          73.33636055\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(Y_train)\n",
        "print(\"--------------------------------------\")\n",
        "print(Y_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4DPNtpuOE8Ms",
        "outputId": "522426ae-6cef-4ef8-802a-bfffe5cf7c96",
        "collapsed": true
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2055          jute\n",
            "1961        cotton\n",
            "1864       coconut\n",
            "2326       soybean\n",
            "461     pigeonpeas\n",
            "           ...    \n",
            "1638        orange\n",
            "1095        banana\n",
            "1130         mango\n",
            "1294        grapes\n",
            "860         lentil\n",
            "Name: label, Length: 2000, dtype: object\n",
            "--------------------------------------\n",
            "1447    muskmelon\n",
            "1114        mango\n",
            "1064       banana\n",
            "2287        wheat\n",
            "1537        apple\n",
            "          ...    \n",
            "2375      soybean\n",
            "1609       orange\n",
            "596     mothbeans\n",
            "84           rice\n",
            "2213        wheat\n",
            "Name: label, Length: 500, dtype: object\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Data Standardization**"
      ],
      "metadata": {
        "id": "IyePgsG12RrC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "scaler = StandardScaler()\n",
        "X_train_scaler = scaler.fit_transform(X_train)\n",
        "X_test_scaler = scaler.transform(X_test)"
      ],
      "metadata": {
        "id": "tZHFxXTBFHml"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_test_scaler"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "mauf9suMGynG",
        "outputId": "11fad60f-8867-43f5-f21b-0091d87bf926"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 0.8267402 , -1.31746359, -0.00384953, ...,  1.03446453,\n",
              "        -0.39726953, -1.52770377],\n",
              "       [-1.1385244 , -1.0636121 , -0.07450758, ..., -0.85951984,\n",
              "        -1.20091288, -0.21913496],\n",
              "       [ 1.07585825,  1.03066272, -0.01027299, ...,  0.47758144,\n",
              "        -0.96668908,  0.09886454],\n",
              "       ...,\n",
              "       [-0.86172657, -0.04820613, -0.12268352, ..., -0.45085145,\n",
              "         2.93410266, -0.62660662],\n",
              "       [ 0.38386367,  0.17391393, -0.04881374, ...,  0.45226337,\n",
              "        -1.35312222,  2.18137193],\n",
              "       [ 0.97870221,  0.43284245, -0.03118135, ...,  0.02534308,\n",
              "         1.13149193, -0.92637802]])"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X_train_scaler"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "R79dtqOfG15g",
        "outputId": "d5adb555-82dc-4b06-862b-372e91f08a9f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 0.38386367, -0.36552049, -0.04560201, ...,  0.79445389,\n",
              "         1.17609099,  0.91794438],\n",
              "       [ 1.49105499, -0.30205762, -0.11626006, ...,  0.49889383,\n",
              "         0.38479808, -0.71196224],\n",
              "       [-1.3046031 , -1.25400072, -0.08093103, ...,  1.36622818,\n",
              "        -0.84310032,  1.83901434],\n",
              "       ...,\n",
              "       [-1.16620418, -0.52417768, -0.07450758, ..., -0.90109044,\n",
              "         0.02193742, -0.06217213],\n",
              "       [-1.16620418,  2.26818875,  0.48112161, ...,  0.42980217,\n",
              "        -0.13188113, -0.6023529 ],\n",
              "       [-0.58492874,  0.80854266, -0.10341314, ..., -0.40349197,\n",
              "         0.73726771, -0.93912418]])"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **LabelEncoder on Output Column**"
      ],
      "metadata": {
        "id": "VEQw_NqkcXgj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "le = LabelEncoder()\n",
        "Y_train_le = le.fit_transform(Y_train)\n",
        "Y_test_le = le.transform(Y_test)"
      ],
      "metadata": {
        "id": "xAzNcWhDG4v1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Y_train_le"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "fr7MvRV1HX7C",
        "outputId": "b549245d-868a-410f-fe5d-143f370a2f0e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([ 9,  7,  5, ..., 12,  8, 11])"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "label_mapping = dict(zip(le.classes_, range(len(le.classes_))))\n",
        "print(\"Label Mapping:\", label_mapping)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dupnb3LoHZ7p",
        "outputId": "5b662d4a-a08e-4979-e56e-d7074d29554d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Label Mapping: {'Corn': 0, 'apple': 1, 'banana': 2, 'blackgram': 3, 'chickpea': 4, 'coconut': 5, 'coffee': 6, 'cotton': 7, 'grapes': 8, 'jute': 9, 'kidneybeans': 10, 'lentil': 11, 'mango': 12, 'mothbeans': 13, 'mungbean': 14, 'muskmelon': 15, 'orange': 16, 'papaya': 17, 'pigeonpeas': 18, 'pomegranate': 19, 'rice': 20, 'soybean': 21, 'turmeric': 22, 'watermelon': 23, 'wheat': 24}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Data Normalization**"
      ],
      "metadata": {
        "id": "jsmJYb5A2xoz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "X_train_normalized = normalize(X_train_scaler)\n",
        "X_test_normalized = normalize(X_test_scaler)"
      ],
      "metadata": {
        "id": "E0V1YsEiIdWc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Model Training**"
      ],
      "metadata": {
        "id": "mK1u2jTR-FrX"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **1. Decision Tree**"
      ],
      "metadata": {
        "id": "meuhNgQX-KOy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "clf = DecisionTreeClassifier(criterion = 'gini', splitter = 'best', max_depth = 14, max_features = 5, min_samples_split = 5, min_samples_leaf =  2, random_state=42)"
      ],
      "metadata": {
        "id": "M5KCHfsHqDeV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "clf.fit(X_train_scaler, Y_train_le)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 97
        },
        "id": "EkyVavDlq3Mu",
        "outputId": "13310f0e-1b6a-4392-da89-ed9d69e1e23a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "DecisionTreeClassifier(max_depth=14, max_features=5, min_samples_leaf=2,\n",
              "                       min_samples_split=5, random_state=42)"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-1 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-1 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-1 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-1 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-1 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeClassifier(max_depth=14, max_features=5, min_samples_leaf=2,\n",
              "                       min_samples_split=5, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>DecisionTreeClassifier</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.tree.DecisionTreeClassifier.html\">?<span>Documentation for DecisionTreeClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>DecisionTreeClassifier(max_depth=14, max_features=5, min_samples_leaf=2,\n",
              "                       min_samples_split=5, random_state=42)</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred = clf.predict(X_test_scaler)"
      ],
      "metadata": {
        "id": "dJE7fiMYrAx0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "r2_score(Y_test_le, y_pred)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Omd69aa-rLXD",
        "outputId": "038f40ce-9049-4b64-988c-cb563d84badc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9816981952001039"
            ]
          },
          "metadata": {},
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Tree Depth:\", clf.get_depth())  # Suggests `max_depth`\n",
        "max_depth_estimate = int(np.log2(len(X_train)))  # Suggests max depth\n",
        "print(\"Estimated max_depth:\", max_depth_estimate)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9Y_Dk2srpdlA",
        "outputId": "83cf8293-421c-4d79-a92a-a687a9661ce5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Tree Depth: 17\n",
            "Estimated max_depth: 10\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"min_samples_leaf:\", clf.get_n_leaves())  # Can help estimate `min_samples_leaf`\n",
        "min_samples_split = int(0.01 * len(X_train))  # 1% of training samples\n",
        "min_samples_leaf = int(0.005 * len(X_train))  # 0.5% of training samples\n",
        "\n",
        "print(\"Estimated min_samples_split:\", min_samples_split)\n",
        "print(\"Estimated min_samples_leaf:\", min_samples_leaf)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jOFZSU44qGEg",
        "outputId": "f7d08728-79cc-4f7d-d46f-3e98b65c3bd2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "min_samples_leaf: 63\n",
            "Estimated min_samples_split: 20\n",
            "Estimated min_samples_leaf: 10\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Grid Search for Decision Tree**"
      ],
      "metadata": {
        "id": "D5ZthsQadCGl"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "para_grid = {\n",
        "    'criterion': ['gini', 'entropy'],\n",
        "    'splitter' : ['best', 'random'],\n",
        "    'max_depth': [5,10,20],\n",
        "    'min_samples_split': [1,2,20,40],\n",
        "    'min_samples_leaf': [2,5,10,16,20],\n",
        "    'max_features': [1,2,3,4,5,6,7]\n",
        "}"
      ],
      "metadata": {
        "id": "EPmODv0_lCA8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "grid_search = GridSearchCV(estimator = clf, param_grid = para_grid, cv = 5)"
      ],
      "metadata": {
        "id": "QOjpiJBPn8D8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "grid_search.fit(X_train_scaler,Y_train_le)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 566
        },
        "id": "nerNcRdIoZdT",
        "outputId": "cfcaba2f-57d3-4ce8-d23b-2cbf80e03901"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py:528: FitFailedWarning: \n",
            "2100 fits failed out of a total of 8400.\n",
            "The score on these train-test partitions for these parameters will be set to nan.\n",
            "If these failures are not expected, you can try to debug them by setting error_score='raise'.\n",
            "\n",
            "Below are more details about the failures:\n",
            "--------------------------------------------------------------------------------\n",
            "2100 fits failed with the following error:\n",
            "Traceback (most recent call last):\n",
            "  File \"/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\", line 866, in _fit_and_score\n",
            "    estimator.fit(X_train, y_train, **fit_params)\n",
            "  File \"/usr/local/lib/python3.11/dist-packages/sklearn/base.py\", line 1382, in wrapper\n",
            "    estimator._validate_params()\n",
            "  File \"/usr/local/lib/python3.11/dist-packages/sklearn/base.py\", line 436, in _validate_params\n",
            "    validate_parameter_constraints(\n",
            "  File \"/usr/local/lib/python3.11/dist-packages/sklearn/utils/_param_validation.py\", line 98, in validate_parameter_constraints\n",
            "    raise InvalidParameterError(\n",
            "sklearn.utils._param_validation.InvalidParameterError: The 'min_samples_split' parameter of DecisionTreeClassifier must be an int in the range [2, inf) or a float in the range (0.0, 1.0]. Got 1 instead.\n",
            "\n",
            "  warnings.warn(some_fits_failed_message, FitFailedWarning)\n",
            "/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_search.py:1108: UserWarning: One or more of the test scores are non-finite: [   nan    nan 0.3285 ... 0.6655 0.9035 0.6655]\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GridSearchCV(cv=5,\n",
              "             estimator=DecisionTreeClassifier(max_depth=20, max_features=5,\n",
              "                                              min_samples_leaf=2,\n",
              "                                              random_state=42),\n",
              "             param_grid={'criterion': ['gini', 'entropy'],\n",
              "                         'max_depth': [5, 10, 20],\n",
              "                         'max_features': [1, 2, 3, 4, 5, 6, 7],\n",
              "                         'min_samples_leaf': [2, 5, 10, 16, 20],\n",
              "                         'min_samples_split': [1, 2, 20, 40],\n",
              "                         'splitter': ['best', 'random']})"
            ],
            "text/html": [
              "<style>#sk-container-id-6 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-6 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-6 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-6 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-6 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-6 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-6 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-6 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-6 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-6 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-6 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-6 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-6 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-6 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-6 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-6 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-6 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-6\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=5,\n",
              "             estimator=DecisionTreeClassifier(max_depth=20, max_features=5,\n",
              "                                              min_samples_leaf=2,\n",
              "                                              random_state=42),\n",
              "             param_grid={&#x27;criterion&#x27;: [&#x27;gini&#x27;, &#x27;entropy&#x27;],\n",
              "                         &#x27;max_depth&#x27;: [5, 10, 20],\n",
              "                         &#x27;max_features&#x27;: [1, 2, 3, 4, 5, 6, 7],\n",
              "                         &#x27;min_samples_leaf&#x27;: [2, 5, 10, 16, 20],\n",
              "                         &#x27;min_samples_split&#x27;: [1, 2, 20, 40],\n",
              "                         &#x27;splitter&#x27;: [&#x27;best&#x27;, &#x27;random&#x27;]})</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" ><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>GridSearchCV</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.model_selection.GridSearchCV.html\">?<span>Documentation for GridSearchCV</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>GridSearchCV(cv=5,\n",
              "             estimator=DecisionTreeClassifier(max_depth=20, max_features=5,\n",
              "                                              min_samples_leaf=2,\n",
              "                                              random_state=42),\n",
              "             param_grid={&#x27;criterion&#x27;: [&#x27;gini&#x27;, &#x27;entropy&#x27;],\n",
              "                         &#x27;max_depth&#x27;: [5, 10, 20],\n",
              "                         &#x27;max_features&#x27;: [1, 2, 3, 4, 5, 6, 7],\n",
              "                         &#x27;min_samples_leaf&#x27;: [2, 5, 10, 16, 20],\n",
              "                         &#x27;min_samples_split&#x27;: [1, 2, 20, 40],\n",
              "                         &#x27;splitter&#x27;: [&#x27;best&#x27;, &#x27;random&#x27;]})</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-9\" type=\"checkbox\" ><label for=\"sk-estimator-id-9\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>best_estimator_: DecisionTreeClassifier</div></div></label><div class=\"sk-toggleable__content fitted\"><pre>DecisionTreeClassifier(max_depth=20, max_features=5, min_samples_leaf=2,\n",
              "                       random_state=42)</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-10\" type=\"checkbox\" ><label for=\"sk-estimator-id-10\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>DecisionTreeClassifier</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.tree.DecisionTreeClassifier.html\">?<span>Documentation for DecisionTreeClassifier</span></a></div></label><div class=\"sk-toggleable__content fitted\"><pre>DecisionTreeClassifier(max_depth=20, max_features=5, min_samples_leaf=2,\n",
              "                       random_state=42)</pre></div> </div></div></div></div></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 68
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "grid_search.best_score_"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "R_k-4L1ZpXKQ",
        "outputId": "b3e9c836-bc26-40d5-b268-b7b9053310fb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9695"
            ]
          },
          "metadata": {},
          "execution_count": 69
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "grid_search.best_params_"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1dN__xNDppu_",
        "outputId": "29d08136-a99f-4197-942e-43ab45a2a810"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'criterion': 'gini',\n",
              " 'max_depth': 20,\n",
              " 'max_features': 5,\n",
              " 'min_samples_leaf': 2,\n",
              " 'min_samples_split': 2,\n",
              " 'splitter': 'best'}"
            ]
          },
          "metadata": {},
          "execution_count": 70
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Importances column base on Decision Tree**"
      ],
      "metadata": {
        "id": "w6vNeSTqdnYs"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "for importance, name in sorted(zip(clf.feature_importances_, X_train.columns),reverse=True):\n",
        "  print (name, importance)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sMZcTUtNdgvq",
        "outputId": "0e4a8417-5368-4883-8cf1-7b24266b83b4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "rainfall 0.25915581178535446\n",
            "K 0.19800243036785525\n",
            "humidity 0.19789826527161183\n",
            "P 0.16881745507827142\n",
            "N 0.09316747149770362\n",
            "temperature 0.069528930816694\n",
            "ph 0.013429635182509458\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **2. Bagging :- Random Forest**"
      ],
      "metadata": {
        "id": "wg-ZOq359Zkg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "best_model = DecisionTreeClassifier(criterion = 'gini', splitter = 'best', max_depth = 20, max_features = 5, min_samples_split = 2, min_samples_leaf =  2, random_state=42)"
      ],
      "metadata": {
        "id": "Y7QSszPjPpH5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "bag_clf = BaggingClassifier(estimator = best_model, n_estimators = 63, max_features = 3, max_samples = 500, bootstrap = False, random_state=42)\n"
      ],
      "metadata": {
        "id": "0ca637klPrqC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "bag_clf.fit(X_train_scaler, Y_train_le)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 164
        },
        "id": "ZHLFoX8nPujM",
        "outputId": "2199b8e5-86ab-4488-fb37-43d8b72581e3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "BaggingClassifier(bootstrap=False,\n",
              "                  estimator=DecisionTreeClassifier(max_depth=20, max_features=5,\n",
              "                                                   min_samples_leaf=2,\n",
              "                                                   random_state=42),\n",
              "                  max_features=3, max_samples=500, n_estimators=63,\n",
              "                  random_state=42)"
            ],
            "text/html": [
              "<style>#sk-container-id-2 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-2 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-2 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-2 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-2 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-2 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-2 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-2 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-2 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>BaggingClassifier(bootstrap=False,\n",
              "                  estimator=DecisionTreeClassifier(max_depth=20, max_features=5,\n",
              "                                                   min_samples_leaf=2,\n",
              "                                                   random_state=42),\n",
              "                  max_features=3, max_samples=500, n_estimators=63,\n",
              "                  random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>BaggingClassifier</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.ensemble.BaggingClassifier.html\">?<span>Documentation for BaggingClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>BaggingClassifier(bootstrap=False,\n",
              "                  estimator=DecisionTreeClassifier(max_depth=20, max_features=5,\n",
              "                                                   min_samples_leaf=2,\n",
              "                                                   random_state=42),\n",
              "                  max_features=3, max_samples=500, n_estimators=63,\n",
              "                  random_state=42)</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>estimator: DecisionTreeClassifier</div></div></label><div class=\"sk-toggleable__content fitted\"><pre>DecisionTreeClassifier(max_depth=20, max_features=5, min_samples_leaf=2,\n",
              "                       random_state=42)</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>DecisionTreeClassifier</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.tree.DecisionTreeClassifier.html\">?<span>Documentation for DecisionTreeClassifier</span></a></div></label><div class=\"sk-toggleable__content fitted\"><pre>DecisionTreeClassifier(max_depth=20, max_features=5, min_samples_leaf=2,\n",
              "                       random_state=42)</pre></div> </div></div></div></div></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y1_pred = bag_clf.predict(X_test_scaler)"
      ],
      "metadata": {
        "id": "WhF8RG36Pwlw"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "r2_score(Y_test_le, y1_pred)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NxnUSWQePzdR",
        "outputId": "09bd42f9-415d-4057-8570-9bc3920f2110"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9902442405117825"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Grid Search for Random Forest**"
      ],
      "metadata": {
        "id": "upjUK9Jkearl"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "para_mete1 = {'n_estimators' : [10,20,30,40,50,60],\n",
        "              'max_samples' : [100,200,300,400,500],\n",
        "              'max_features' : [1,2,3,4,5,6,7],\n",
        "              'bootstrap' : [True, False]}"
      ],
      "metadata": {
        "id": "IhR_8EJVP18F"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "grid_search_RF = GridSearchCV(estimator = bag_clf, param_grid = para_mete1, cv = 5)"
      ],
      "metadata": {
        "id": "78tf7uuxP5Gc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "grid_search_RF.fit(X_train_scaler,Y_train_le)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 211
        },
        "id": "LF0z00KKP7kV",
        "outputId": "fc2a367d-4c4e-462c-9445-778cd5b7bf74"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GridSearchCV(cv=5,\n",
              "             estimator=BaggingClassifier(bootstrap=False,\n",
              "                                         estimator=DecisionTreeClassifier(max_depth=20,\n",
              "                                                                          max_features=5,\n",
              "                                                                          min_samples_leaf=2,\n",
              "                                                                          random_state=42),\n",
              "                                         max_features=3, max_samples=500,\n",
              "                                         n_estimators=63, random_state=42),\n",
              "             param_grid={'bootstrap': [True, False],\n",
              "                         'max_features': [1, 2, 3, 4, 5, 6, 7],\n",
              "                         'max_samples': [100, 200, 300, 400, 500],\n",
              "                         'n_estimators': [10, 20, 30, 40, 50, 60]})"
            ],
            "text/html": [
              "<style>#sk-container-id-26 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-26 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-26 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-26 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-26 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-26 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-26 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-26 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-26 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-26 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-26 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-26 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-26 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-26 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-26 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-26 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-26 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-26 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-26 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-26 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-26 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-26 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-26 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-26 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-26 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-26 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-26 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-26 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-26 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-26 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-26 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-26 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-26 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-26 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-26 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-26 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-26 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-26 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-26 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-26 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-26 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-26 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-26 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-26\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=5,\n",
              "             estimator=BaggingClassifier(bootstrap=False,\n",
              "                                         estimator=DecisionTreeClassifier(max_depth=20,\n",
              "                                                                          max_features=5,\n",
              "                                                                          min_samples_leaf=2,\n",
              "                                                                          random_state=42),\n",
              "                                         max_features=3, max_samples=500,\n",
              "                                         n_estimators=63, random_state=42),\n",
              "             param_grid={&#x27;bootstrap&#x27;: [True, False],\n",
              "                         &#x27;max_features&#x27;: [1, 2, 3, 4, 5, 6, 7],\n",
              "                         &#x27;max_samples&#x27;: [100, 200, 300, 400, 500],\n",
              "                         &#x27;n_estimators&#x27;: [10, 20, 30, 40, 50, 60]})</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-28\" type=\"checkbox\" ><label for=\"sk-estimator-id-28\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>GridSearchCV</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.model_selection.GridSearchCV.html\">?<span>Documentation for GridSearchCV</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>GridSearchCV(cv=5,\n",
              "             estimator=BaggingClassifier(bootstrap=False,\n",
              "                                         estimator=DecisionTreeClassifier(max_depth=20,\n",
              "                                                                          max_features=5,\n",
              "                                                                          min_samples_leaf=2,\n",
              "                                                                          random_state=42),\n",
              "                                         max_features=3, max_samples=500,\n",
              "                                         n_estimators=63, random_state=42),\n",
              "             param_grid={&#x27;bootstrap&#x27;: [True, False],\n",
              "                         &#x27;max_features&#x27;: [1, 2, 3, 4, 5, 6, 7],\n",
              "                         &#x27;max_samples&#x27;: [100, 200, 300, 400, 500],\n",
              "                         &#x27;n_estimators&#x27;: [10, 20, 30, 40, 50, 60]})</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-29\" type=\"checkbox\" ><label for=\"sk-estimator-id-29\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>best_estimator_: BaggingClassifier</div></div></label><div class=\"sk-toggleable__content fitted\"><pre>BaggingClassifier(bootstrap=False,\n",
              "                  estimator=DecisionTreeClassifier(max_depth=20, max_features=5,\n",
              "                                                   min_samples_leaf=2,\n",
              "                                                   random_state=42),\n",
              "                  max_features=4, max_samples=500, n_estimators=30,\n",
              "                  random_state=42)</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-30\" type=\"checkbox\" ><label for=\"sk-estimator-id-30\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>estimator: DecisionTreeClassifier</div></div></label><div class=\"sk-toggleable__content fitted\"><pre>DecisionTreeClassifier(max_depth=20, max_features=5, min_samples_leaf=2,\n",
              "                       random_state=42)</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-31\" type=\"checkbox\" ><label for=\"sk-estimator-id-31\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>DecisionTreeClassifier</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.tree.DecisionTreeClassifier.html\">?<span>Documentation for DecisionTreeClassifier</span></a></div></label><div class=\"sk-toggleable__content fitted\"><pre>DecisionTreeClassifier(max_depth=20, max_features=5, min_samples_leaf=2,\n",
              "                       random_state=42)</pre></div> </div></div></div></div></div></div></div></div></div></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 153
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "grid_search_RF.best_score_"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mdJbfWAVQUZi",
        "outputId": "121126c9-f3ea-4185-fb92-4916336ce807"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.985"
            ]
          },
          "metadata": {},
          "execution_count": 154
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "grid_search_RF.best_params_"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "05Dt8x8EQXDA",
        "outputId": "2bf155c5-dc29-4418-cf50-4ea2e9af3ee8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'bootstrap': False, 'max_features': 4, 'max_samples': 500, 'n_estimators': 30}"
            ]
          },
          "metadata": {},
          "execution_count": 155
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **SVM (Support Vector Machine) :- SVC (Support Vector Classifier)**"
      ],
      "metadata": {
        "id": "yDgIgSAMk_0X"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "clf_svc = SVC(C = 120, kernel = 'rbf', gamma = 'scale', coef0 = 0)"
      ],
      "metadata": {
        "id": "vXeT4GeelNPC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "clf_svc.fit(X_train_scaler, Y_train_le)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "rkwkpyFYlNG-",
        "outputId": "dce98a7b-4bdb-4c2f-fdaa-ed7a1d93b9ae"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "SVC(C=120, coef0=0)"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-1 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-1 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-1 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-1 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-1 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SVC(C=120, coef0=0)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>SVC</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.svm.SVC.html\">?<span>Documentation for SVC</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>SVC(C=120, coef0=0)</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_prd_svc  = clf_svc.predict(X_test_scaler)"
      ],
      "metadata": {
        "id": "JFrtNBjYlM-Q"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "r2_score(Y_test_le,y_prd_svc)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "twYe6h88lM0y",
        "outputId": "9184483c-f2d8-4f92-f3aa-19be83e2be3e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.948021313446777"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Parameter tuning in SVC**"
      ],
      "metadata": {
        "id": "xile0sJIYCVc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "clf1_svc = SVC(C = 100 ,kernel = 'poly', coef0 = 7, degree = 3, gamma = 0.8)\n",
        "# {'C': 100, 'coef0': 5, 'degree': 3, 'gamma': 0.1, 'kernel': 'poly'}"
      ],
      "metadata": {
        "id": "-STmn1b9TYQX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "clf1_svc.fit(X_train_scaler, Y_train_le)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "OK7otAOTUFQy",
        "outputId": "bb73d120-5486-440c-9618-2364b7a87079"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "SVC(C=100, coef0=7, gamma=0.8, kernel='poly')"
            ],
            "text/html": [
              "<style>#sk-container-id-35 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-35 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-35 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-35 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-35 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-35 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-35 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-35 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-35 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-35 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-35 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-35 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-35 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-35 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-35 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-35 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-35 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-35 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-35 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-35 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-35 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-35 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-35 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-35 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-35 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-35 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-35 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-35 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-35 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-35 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-35 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-35 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-35 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-35 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-35 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-35 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-35 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-35 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-35 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-35 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-35 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-35 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-35 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-35\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SVC(C=100, coef0=7, gamma=0.8, kernel=&#x27;poly&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-37\" type=\"checkbox\" checked><label for=\"sk-estimator-id-37\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>SVC</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.svm.SVC.html\">?<span>Documentation for SVC</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>SVC(C=100, coef0=7, gamma=0.8, kernel=&#x27;poly&#x27;)</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 162
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_prd1_svc  = clf1_svc.predict(X_test_scaler)"
      ],
      "metadata": {
        "id": "gR_raf_uUHu7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "r2_score(Y_test_le,y_prd1_svc)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qg-pth9CUJes",
        "outputId": "cbf227d6-0747-4d7c-b8ca-7fd76f8a9879"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9502846496480434"
            ]
          },
          "metadata": {},
          "execution_count": 164
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Grid Search for SVC**"
      ],
      "metadata": {
        "id": "ViWShRdHYSio"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "para_grid_svc1 = {'C' : [0.1,1,10,100],\n",
        "                 'gamma' : ['scale', 'auto', 1.0, 0.1, 10,],\n",
        "                 'kernel' : ['linear', 'poly','rbf','sigmoid'],\n",
        "                  'degree' : [1,2,3,4,5,6,7],\n",
        "                 'coef0' : [0,1,2,3,4,5]}"
      ],
      "metadata": {
        "id": "OL2MsErilMhb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "para_grid_svc.fit(X_train_scaler,Y_train_le)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 164
        },
        "id": "YXd4Mny8ldcw",
        "outputId": "d36d9e38-7a07-43a9-cf49-ac914e894229"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GridSearchCV(cv=5, estimator=SVC(C=120, coef0=0),\n",
              "             param_grid={'C': [0.1, 1, 10, 100], 'coef0': [0, 1, 2, 3, 4, 5],\n",
              "                         'degree': [1, 2, 3, 4, 5, 6, 7],\n",
              "                         'gamma': ['scale', 'auto', 1.0, 0.1, 10],\n",
              "                         'kernel': ['linear', 'poly', 'rbf', 'sigmoid']})"
            ],
            "text/html": [
              "<style>#sk-container-id-2 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-2 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-2 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-2 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-2 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-2 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-2 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-2 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-2 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=5, estimator=SVC(C=120, coef0=0),\n",
              "             param_grid={&#x27;C&#x27;: [0.1, 1, 10, 100], &#x27;coef0&#x27;: [0, 1, 2, 3, 4, 5],\n",
              "                         &#x27;degree&#x27;: [1, 2, 3, 4, 5, 6, 7],\n",
              "                         &#x27;gamma&#x27;: [&#x27;scale&#x27;, &#x27;auto&#x27;, 1.0, 0.1, 10],\n",
              "                         &#x27;kernel&#x27;: [&#x27;linear&#x27;, &#x27;poly&#x27;, &#x27;rbf&#x27;, &#x27;sigmoid&#x27;]})</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>GridSearchCV</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.model_selection.GridSearchCV.html\">?<span>Documentation for GridSearchCV</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>GridSearchCV(cv=5, estimator=SVC(C=120, coef0=0),\n",
              "             param_grid={&#x27;C&#x27;: [0.1, 1, 10, 100], &#x27;coef0&#x27;: [0, 1, 2, 3, 4, 5],\n",
              "                         &#x27;degree&#x27;: [1, 2, 3, 4, 5, 6, 7],\n",
              "                         &#x27;gamma&#x27;: [&#x27;scale&#x27;, &#x27;auto&#x27;, 1.0, 0.1, 10],\n",
              "                         &#x27;kernel&#x27;: [&#x27;linear&#x27;, &#x27;poly&#x27;, &#x27;rbf&#x27;, &#x27;sigmoid&#x27;]})</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>best_estimator_: SVC</div></div></label><div class=\"sk-toggleable__content fitted\"><pre>SVC(C=100, coef0=5, gamma=0.1, kernel=&#x27;poly&#x27;)</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>SVC</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.svm.SVC.html\">?<span>Documentation for SVC</span></a></div></label><div class=\"sk-toggleable__content fitted\"><pre>SVC(C=100, coef0=5, gamma=0.1, kernel=&#x27;poly&#x27;)</pre></div> </div></div></div></div></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "para_grid_svc.best_score_"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "x4IwSVX9ldRK",
        "outputId": "7f3acefd-5dfd-4e9f-df24-97af3c96bc4c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9595"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "para_grid_svc.best_params_"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HUYqo3fVldHZ",
        "outputId": "35a9148b-90cc-407a-95c8-3f5e5a21e402"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'C': 100, 'coef0': 5, 'degree': 3, 'gamma': 0.1, 'kernel': 'poly'}"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **KNN (k-Nearest Neighbors classifier)**"
      ],
      "metadata": {
        "id": "qCcAOEV_YjBJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "clf_knn = KNeighborsClassifier(algorithm = 'ball_tree',leaf_size = 10,n_neighbors = 4,p = 1,weights = 'distance')"
      ],
      "metadata": {
        "id": "fB6MUg6hZg-J"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "clf_knn.fit(X_train_scaler, Y_train_le)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 97
        },
        "id": "4XVDl36rZsb0",
        "outputId": "acbcd751-fccd-424e-88b8-4ec72c816a30"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "KNeighborsClassifier(algorithm='ball_tree', leaf_size=10, n_neighbors=4, p=1,\n",
              "                     weights='distance')"
            ],
            "text/html": [
              "<style>#sk-container-id-10 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-10 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-10 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-10 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-10 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-10 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-10 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-10 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-10 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-10 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-10 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-10 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-10 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-10 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-10 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-10 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-10 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-10 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-10 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-10 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-10 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-10 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-10 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-10 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-10 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-10 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-10 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-10 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-10 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-10 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-10 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-10 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-10 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-10 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-10 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-10 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-10 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-10 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-10 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-10 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-10 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-10 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-10 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-10\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsClassifier(algorithm=&#x27;ball_tree&#x27;, leaf_size=10, n_neighbors=4, p=1,\n",
              "                     weights=&#x27;distance&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-12\" type=\"checkbox\" checked><label for=\"sk-estimator-id-12\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>KNeighborsClassifier</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.neighbors.KNeighborsClassifier.html\">?<span>Documentation for KNeighborsClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>KNeighborsClassifier(algorithm=&#x27;ball_tree&#x27;, leaf_size=10, n_neighbors=4, p=1,\n",
              "                     weights=&#x27;distance&#x27;)</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 55
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred_knn = clf_knn.predict(X_test_scaler)"
      ],
      "metadata": {
        "id": "4WrsIB0GZwBA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "accuracy_score(Y_test_le,y_pred_knn)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cOy5PJ6Lp4mx",
        "outputId": "44da63db-942f-4ae4-8852-c49b32d3d91d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.954"
            ]
          },
          "metadata": {},
          "execution_count": 60
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "r2_score(Y_test_le,y_pred_knn)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0l6-9cL0Zyep",
        "outputId": "08822f87-dbb7-49e9-bc6b-d0f2c5d139d7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.8252938590850003"
            ]
          },
          "metadata": {},
          "execution_count": 57
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Grid Search for KNN**"
      ],
      "metadata": {
        "id": "RpnmwmrIenzC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "grid_para_knn = {'n_neighbors' : [1,2,4,5,7,8,10],\n",
        "                 'weights' : ['uniform', 'distance'],\n",
        "                 'algorithm' : ['ball_tree', 'kd_tree', 'brute'],\n",
        "                 'leaf_size' : [10,20,30,40,50],\n",
        "                 'p' : [1,2,3,4]\n",
        "                 }"
      ],
      "metadata": {
        "id": "qebwZvUnZ0HW"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "grid_search_knn = GridSearchCV(estimator = clf_knn, param_grid = grid_para_knn, cv = 5)"
      ],
      "metadata": {
        "id": "zVLo0HtDZ2Ni"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "grid_search_knn.fit(X_train_scaler,Y_train_le)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 164
        },
        "id": "pVZwN5bVZ8Pf",
        "outputId": "9e198452-3f22-48fc-acc4-a85f38f90ee1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GridSearchCV(cv=5,\n",
              "             estimator=KNeighborsClassifier(algorithm='kd_tree', leaf_size=10,\n",
              "                                            n_neighbors=4, p=1,\n",
              "                                            weights='distance'),\n",
              "             param_grid={'algorithm': ['ball_tree', 'kd_tree', 'brute'],\n",
              "                         'leaf_size': [10, 20, 30, 40, 50],\n",
              "                         'n_neighbors': [1, 2, 4, 5, 7, 8, 10],\n",
              "                         'p': [1, 2, 3, 4],\n",
              "                         'weights': ['uniform', 'distance']})"
            ],
            "text/html": [
              "<style>#sk-container-id-4 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-4 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-4 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-4 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-4 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-4 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-4 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-4 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-4 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-4 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-4 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-4 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-4 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-4 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=5,\n",
              "             estimator=KNeighborsClassifier(algorithm=&#x27;kd_tree&#x27;, leaf_size=10,\n",
              "                                            n_neighbors=4, p=1,\n",
              "                                            weights=&#x27;distance&#x27;),\n",
              "             param_grid={&#x27;algorithm&#x27;: [&#x27;ball_tree&#x27;, &#x27;kd_tree&#x27;, &#x27;brute&#x27;],\n",
              "                         &#x27;leaf_size&#x27;: [10, 20, 30, 40, 50],\n",
              "                         &#x27;n_neighbors&#x27;: [1, 2, 4, 5, 7, 8, 10],\n",
              "                         &#x27;p&#x27;: [1, 2, 3, 4],\n",
              "                         &#x27;weights&#x27;: [&#x27;uniform&#x27;, &#x27;distance&#x27;]})</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>GridSearchCV</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.model_selection.GridSearchCV.html\">?<span>Documentation for GridSearchCV</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>GridSearchCV(cv=5,\n",
              "             estimator=KNeighborsClassifier(algorithm=&#x27;kd_tree&#x27;, leaf_size=10,\n",
              "                                            n_neighbors=4, p=1,\n",
              "                                            weights=&#x27;distance&#x27;),\n",
              "             param_grid={&#x27;algorithm&#x27;: [&#x27;ball_tree&#x27;, &#x27;kd_tree&#x27;, &#x27;brute&#x27;],\n",
              "                         &#x27;leaf_size&#x27;: [10, 20, 30, 40, 50],\n",
              "                         &#x27;n_neighbors&#x27;: [1, 2, 4, 5, 7, 8, 10],\n",
              "                         &#x27;p&#x27;: [1, 2, 3, 4],\n",
              "                         &#x27;weights&#x27;: [&#x27;uniform&#x27;, &#x27;distance&#x27;]})</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" ><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>best_estimator_: KNeighborsClassifier</div></div></label><div class=\"sk-toggleable__content fitted\"><pre>KNeighborsClassifier(algorithm=&#x27;ball_tree&#x27;, leaf_size=10, n_neighbors=4, p=1,\n",
              "                     weights=&#x27;distance&#x27;)</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" ><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>KNeighborsClassifier</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.neighbors.KNeighborsClassifier.html\">?<span>Documentation for KNeighborsClassifier</span></a></div></label><div class=\"sk-toggleable__content fitted\"><pre>KNeighborsClassifier(algorithm=&#x27;ball_tree&#x27;, leaf_size=10, n_neighbors=4, p=1,\n",
              "                     weights=&#x27;distance&#x27;)</pre></div> </div></div></div></div></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "grid_search_knn.best_score_"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dZUJMsLEZ-Oq",
        "outputId": "0064a220-1a18-4967-b2b0-4ba1c88b8567"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9445"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "grid_search_knn.best_params_"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "X6_5DPteaFdh",
        "outputId": "e96f0aac-cb4f-428b-858f-17ad227d92b2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'algorithm': 'ball_tree',\n",
              " 'leaf_size': 10,\n",
              " 'n_neighbors': 4,\n",
              " 'p': 1,\n",
              " 'weights': 'distance'}"
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Bagging Classifier for KNN**"
      ],
      "metadata": {
        "id": "SbfU5WO1vuE8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "bag_clf_knn = BaggingClassifier(estimator = clf_knn, n_estimators = 65, max_features = 5, max_samples = 1500, bootstrap = False, random_state=42)\n",
        "# 'bootstrap': False, 'max_features': 3, 'max_samples': 400, 'n_estimators': 60"
      ],
      "metadata": {
        "id": "1aIoR37JaHS4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "bag_clf_knn.fit(X_train_scaler, Y_train_le)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 164
        },
        "id": "rHxS-Bc1tIg2",
        "outputId": "f0098b34-7500-444e-95e5-68b0931d228f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "BaggingClassifier(bootstrap=False,\n",
              "                  estimator=KNeighborsClassifier(algorithm='ball_tree',\n",
              "                                                 leaf_size=10, n_neighbors=4,\n",
              "                                                 p=1, weights='distance'),\n",
              "                  max_features=5, max_samples=1500, n_estimators=65,\n",
              "                  random_state=42)"
            ],
            "text/html": [
              "<style>#sk-container-id-55 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-55 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-55 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-55 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-55 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-55 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-55 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-55 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-55 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-55 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-55 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-55 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-55 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-55 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-55 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-55 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-55 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-55 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-55 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-55 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-55 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-55 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-55 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-55 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-55 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-55 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-55 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-55 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-55 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-55 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-55 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-55 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-55 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-55 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-55 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-55 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-55 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-55 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-55 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-55 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-55 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-55 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-55 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-55\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>BaggingClassifier(bootstrap=False,\n",
              "                  estimator=KNeighborsClassifier(algorithm=&#x27;ball_tree&#x27;,\n",
              "                                                 leaf_size=10, n_neighbors=4,\n",
              "                                                 p=1, weights=&#x27;distance&#x27;),\n",
              "                  max_features=5, max_samples=1500, n_estimators=65,\n",
              "                  random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-146\" type=\"checkbox\" ><label for=\"sk-estimator-id-146\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>BaggingClassifier</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.ensemble.BaggingClassifier.html\">?<span>Documentation for BaggingClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>BaggingClassifier(bootstrap=False,\n",
              "                  estimator=KNeighborsClassifier(algorithm=&#x27;ball_tree&#x27;,\n",
              "                                                 leaf_size=10, n_neighbors=4,\n",
              "                                                 p=1, weights=&#x27;distance&#x27;),\n",
              "                  max_features=5, max_samples=1500, n_estimators=65,\n",
              "                  random_state=42)</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-147\" type=\"checkbox\" ><label for=\"sk-estimator-id-147\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>estimator: KNeighborsClassifier</div></div></label><div class=\"sk-toggleable__content fitted\"><pre>KNeighborsClassifier(algorithm=&#x27;ball_tree&#x27;, leaf_size=10, n_neighbors=4, p=1,\n",
              "                     weights=&#x27;distance&#x27;)</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-148\" type=\"checkbox\" ><label for=\"sk-estimator-id-148\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>KNeighborsClassifier</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.neighbors.KNeighborsClassifier.html\">?<span>Documentation for KNeighborsClassifier</span></a></div></label><div class=\"sk-toggleable__content fitted\"><pre>KNeighborsClassifier(algorithm=&#x27;ball_tree&#x27;, leaf_size=10, n_neighbors=4, p=1,\n",
              "                     weights=&#x27;distance&#x27;)</pre></div> </div></div></div></div></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 257
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred_bag_knn = bag_clf_knn.predict(X_test_scaler)"
      ],
      "metadata": {
        "id": "iedi-9e9tSbT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "accuracy_score(y_pred_bag_knn,y_pred_knn)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LtmkFscrtY1s",
        "outputId": "f97450f9-5615-48af-d4bf-34ab1484ebb2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.98"
            ]
          },
          "metadata": {},
          "execution_count": 259
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Grid Search for Bagging Classsifier of KNN**"
      ],
      "metadata": {
        "id": "EV4G5sdy5UUp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "grid_para_bag_knn = {'n_estimators' : [10,20,30,40,50,60],\n",
        "              'max_samples' : [100,200,300,400,500],\n",
        "              'max_features' : [1,2,3,4,5,6,7],\n",
        "              'bootstrap' : [True, False]}"
      ],
      "metadata": {
        "id": "oOVc_RrDtk8q"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "grid_search_bag_knn  = GridSearchCV(estimator = bag_clf_knn, param_grid = grid_para_bag_knn, cv = 5)"
      ],
      "metadata": {
        "id": "PzF7IeWft657"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "grid_search_bag_knn.fit(X_train_scaler,Y_train_le)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 211
        },
        "id": "lNhuvG2wuLoz",
        "outputId": "67bcce47-8cd4-4de8-a1d3-8d469b509844"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GridSearchCV(cv=5,\n",
              "             estimator=BaggingClassifier(bootstrap=False,\n",
              "                                         estimator=KNeighborsClassifier(algorithm='ball_tree',\n",
              "                                                                        leaf_size=10,\n",
              "                                                                        n_neighbors=4,\n",
              "                                                                        p=1,\n",
              "                                                                        weights='distance'),\n",
              "                                         max_features=3, max_samples=500,\n",
              "                                         n_estimators=70, random_state=42),\n",
              "             param_grid={'bootstrap': [True, False],\n",
              "                         'max_features': [1, 2, 3, 4, 5, 6, 7],\n",
              "                         'max_samples': [100, 200, 300, 400, 500],\n",
              "                         'n_estimators': [10, 20, 30, 40, 50, 60]})"
            ],
            "text/html": [
              "<style>#sk-container-id-13 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-13 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-13 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-13 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-13 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-13 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-13 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-13 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-13 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-13 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-13 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-13 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-13 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-13 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-13 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-13 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-13 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-13 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-13 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-13 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-13 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-13 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-13 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-13 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-13 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-13 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-13 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-13 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-13 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-13 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-13 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-13 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-13 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-13 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-13 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-13 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-13 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-13 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-13 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-13 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-13 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-13 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-13 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-13\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=5,\n",
              "             estimator=BaggingClassifier(bootstrap=False,\n",
              "                                         estimator=KNeighborsClassifier(algorithm=&#x27;ball_tree&#x27;,\n",
              "                                                                        leaf_size=10,\n",
              "                                                                        n_neighbors=4,\n",
              "                                                                        p=1,\n",
              "                                                                        weights=&#x27;distance&#x27;),\n",
              "                                         max_features=3, max_samples=500,\n",
              "                                         n_estimators=70, random_state=42),\n",
              "             param_grid={&#x27;bootstrap&#x27;: [True, False],\n",
              "                         &#x27;max_features&#x27;: [1, 2, 3, 4, 5, 6, 7],\n",
              "                         &#x27;max_samples&#x27;: [100, 200, 300, 400, 500],\n",
              "                         &#x27;n_estimators&#x27;: [10, 20, 30, 40, 50, 60]})</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-19\" type=\"checkbox\" ><label for=\"sk-estimator-id-19\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>GridSearchCV</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.model_selection.GridSearchCV.html\">?<span>Documentation for GridSearchCV</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>GridSearchCV(cv=5,\n",
              "             estimator=BaggingClassifier(bootstrap=False,\n",
              "                                         estimator=KNeighborsClassifier(algorithm=&#x27;ball_tree&#x27;,\n",
              "                                                                        leaf_size=10,\n",
              "                                                                        n_neighbors=4,\n",
              "                                                                        p=1,\n",
              "                                                                        weights=&#x27;distance&#x27;),\n",
              "                                         max_features=3, max_samples=500,\n",
              "                                         n_estimators=70, random_state=42),\n",
              "             param_grid={&#x27;bootstrap&#x27;: [True, False],\n",
              "                         &#x27;max_features&#x27;: [1, 2, 3, 4, 5, 6, 7],\n",
              "                         &#x27;max_samples&#x27;: [100, 200, 300, 400, 500],\n",
              "                         &#x27;n_estimators&#x27;: [10, 20, 30, 40, 50, 60]})</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-20\" type=\"checkbox\" ><label for=\"sk-estimator-id-20\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>best_estimator_: BaggingClassifier</div></div></label><div class=\"sk-toggleable__content fitted\"><pre>BaggingClassifier(bootstrap=False,\n",
              "                  estimator=KNeighborsClassifier(algorithm=&#x27;ball_tree&#x27;,\n",
              "                                                 leaf_size=10, n_neighbors=4,\n",
              "                                                 p=1, weights=&#x27;distance&#x27;),\n",
              "                  max_features=3, max_samples=400, n_estimators=60,\n",
              "                  random_state=42)</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-21\" type=\"checkbox\" ><label for=\"sk-estimator-id-21\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>estimator: KNeighborsClassifier</div></div></label><div class=\"sk-toggleable__content fitted\"><pre>KNeighborsClassifier(algorithm=&#x27;ball_tree&#x27;, leaf_size=10, n_neighbors=4, p=1,\n",
              "                     weights=&#x27;distance&#x27;)</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-22\" type=\"checkbox\" ><label for=\"sk-estimator-id-22\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>KNeighborsClassifier</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.neighbors.KNeighborsClassifier.html\">?<span>Documentation for KNeighborsClassifier</span></a></div></label><div class=\"sk-toggleable__content fitted\"><pre>KNeighborsClassifier(algorithm=&#x27;ball_tree&#x27;, leaf_size=10, n_neighbors=4, p=1,\n",
              "                     weights=&#x27;distance&#x27;)</pre></div> </div></div></div></div></div></div></div></div></div></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 75
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "grid_search_bag_knn.best_score_"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "y8mpK59ZuQgt",
        "outputId": "0a0c60d2-a9b4-4bd0-8fb8-c8c809f5c0c2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9629999999999999"
            ]
          },
          "metadata": {},
          "execution_count": 76
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "grid_search_bag_knn.best_params_"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KZoAhOmeviD_",
        "outputId": "37688806-d1dd-4a43-ed3f-f1eb862ed995"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'bootstrap': False, 'max_features': 3, 'max_samples': 400, 'n_estimators': 60}"
            ]
          },
          "metadata": {},
          "execution_count": 78
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Stacking Ensemble Learning**"
      ],
      "metadata": {
        "id": "p-HsDwOFx3t5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "base_models = [\n",
        "    ('dt', DecisionTreeClassifier(criterion = 'gini', splitter = 'best', max_depth = 20, max_features = 5, min_samples_split = 2, min_samples_leaf =  2, random_state=42)),       # Decision Tree\n",
        "    ('svc', SVC(C = 100 ,kernel = 'poly', coef0 = 7, degree = 3, gamma = 0.8)),         # SVC (must set probability=True)\n",
        "    ('knn', KNeighborsClassifier(algorithm = 'ball_tree',leaf_size = 10,n_neighbors = 4,p = 1,weights = 'distance'))         # K-Nearest Neighbors\n",
        "]"
      ],
      "metadata": {
        "id": "6kOJnDn6x86R"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**In stacking parameter tuning means hyperparameter those use in in best_models**"
      ],
      "metadata": {
        "id": "O-ZK1NOJzwy0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "stacking_clf = StackingClassifier(estimators=base_models, final_estimator=LogisticRegression())"
      ],
      "metadata": {
        "id": "s60MEIWlyDK9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "stacking_clf.fit(X_train_scaler, Y_train_le)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 332
        },
        "id": "v_ePYuvEyWTw",
        "outputId": "b158bffd-48cd-4469-a05f-6076d6484d4b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:465: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
            "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
            "\n",
            "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
            "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
            "Please also refer to the documentation for alternative solver options:\n",
            "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
            "  n_iter_i = _check_optimize_result(\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "StackingClassifier(estimators=[('dt',\n",
              "                                DecisionTreeClassifier(max_depth=20,\n",
              "                                                       max_features=5,\n",
              "                                                       min_samples_leaf=2,\n",
              "                                                       random_state=42)),\n",
              "                               ('svc',\n",
              "                                SVC(C=100, coef0=7, gamma=0.8, kernel='poly')),\n",
              "                               ('knn',\n",
              "                                KNeighborsClassifier(algorithm='ball_tree',\n",
              "                                                     leaf_size=10,\n",
              "                                                     n_neighbors=4, p=1,\n",
              "                                                     weights='distance'))],\n",
              "                   final_estimator=LogisticRegression())"
            ],
            "text/html": [
              "<style>#sk-container-id-57 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-57 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-57 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-57 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-57 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-57 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-57 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-57 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-57 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-57 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-57 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-57 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-57 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-57 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-57 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-57 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-57 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-57 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-57 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-57 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-57 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-57 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-57 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-57 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-57 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-57 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-57 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-57 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-57 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-57 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-57 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-57 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-57 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-57 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-57 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-57 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-57 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-57 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-57 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-57 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-57 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-57 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-57 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-57\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>StackingClassifier(estimators=[(&#x27;dt&#x27;,\n",
              "                                DecisionTreeClassifier(max_depth=20,\n",
              "                                                       max_features=5,\n",
              "                                                       min_samples_leaf=2,\n",
              "                                                       random_state=42)),\n",
              "                               (&#x27;svc&#x27;,\n",
              "                                SVC(C=100, coef0=7, gamma=0.8, kernel=&#x27;poly&#x27;)),\n",
              "                               (&#x27;knn&#x27;,\n",
              "                                KNeighborsClassifier(algorithm=&#x27;ball_tree&#x27;,\n",
              "                                                     leaf_size=10,\n",
              "                                                     n_neighbors=4, p=1,\n",
              "                                                     weights=&#x27;distance&#x27;))],\n",
              "                   final_estimator=LogisticRegression())</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-154\" type=\"checkbox\" ><label for=\"sk-estimator-id-154\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>StackingClassifier</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.ensemble.StackingClassifier.html\">?<span>Documentation for StackingClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>StackingClassifier(estimators=[(&#x27;dt&#x27;,\n",
              "                                DecisionTreeClassifier(max_depth=20,\n",
              "                                                       max_features=5,\n",
              "                                                       min_samples_leaf=2,\n",
              "                                                       random_state=42)),\n",
              "                               (&#x27;svc&#x27;,\n",
              "                                SVC(C=100, coef0=7, gamma=0.8, kernel=&#x27;poly&#x27;)),\n",
              "                               (&#x27;knn&#x27;,\n",
              "                                KNeighborsClassifier(algorithm=&#x27;ball_tree&#x27;,\n",
              "                                                     leaf_size=10,\n",
              "                                                     n_neighbors=4, p=1,\n",
              "                                                     weights=&#x27;distance&#x27;))],\n",
              "                   final_estimator=LogisticRegression())</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><label>dt</label></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-155\" type=\"checkbox\" ><label for=\"sk-estimator-id-155\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>DecisionTreeClassifier</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.tree.DecisionTreeClassifier.html\">?<span>Documentation for DecisionTreeClassifier</span></a></div></label><div class=\"sk-toggleable__content fitted\"><pre>DecisionTreeClassifier(max_depth=20, max_features=5, min_samples_leaf=2,\n",
              "                       random_state=42)</pre></div> </div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><label>svc</label></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-156\" type=\"checkbox\" ><label for=\"sk-estimator-id-156\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>SVC</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.svm.SVC.html\">?<span>Documentation for SVC</span></a></div></label><div class=\"sk-toggleable__content fitted\"><pre>SVC(C=100, coef0=7, gamma=0.8, kernel=&#x27;poly&#x27;)</pre></div> </div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><label>knn</label></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-157\" type=\"checkbox\" ><label for=\"sk-estimator-id-157\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>KNeighborsClassifier</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.neighbors.KNeighborsClassifier.html\">?<span>Documentation for KNeighborsClassifier</span></a></div></label><div class=\"sk-toggleable__content fitted\"><pre>KNeighborsClassifier(algorithm=&#x27;ball_tree&#x27;, leaf_size=10, n_neighbors=4, p=1,\n",
              "                     weights=&#x27;distance&#x27;)</pre></div> </div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><label>final_estimator</label></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-158\" type=\"checkbox\" ><label for=\"sk-estimator-id-158\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>LogisticRegression</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.linear_model.LogisticRegression.html\">?<span>Documentation for LogisticRegression</span></a></div></label><div class=\"sk-toggleable__content fitted\"><pre>LogisticRegression()</pre></div> </div></div></div></div></div></div></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 272
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_prd_stack = stacking_clf.predict(X_test_scaler)"
      ],
      "metadata": {
        "id": "65nTuUD8yjE7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "accuracy_score(Y_test_le, y_prd_stack)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1Rr-YP1WyZ0v",
        "outputId": "ebdcc4c4-a336-4eb5-a5e4-03f3f3a4b967"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.98"
            ]
          },
          "metadata": {},
          "execution_count": 274
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Try to different final prediction model in stacking**"
      ],
      "metadata": {
        "id": "2WM-ZnnP0wtm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "meta_models = [LogisticRegression(),RandomForestClassifier(n_estimators=100),GradientBoostingClassifier(n_estimators=50)]"
      ],
      "metadata": {
        "id": "WqfTEe-mywRa"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for meta_model in meta_models:\n",
        "  stacking_clf = StackingClassifier(estimators=base_models, final_estimator=meta_model)\n",
        "  stacking_clf.fit(X_train_scaler, Y_train_le)\n",
        "  print(accuracy_score(Y_test_le, stacking_clf.predict(X_test_scaler)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lhUe_WHm04T2",
        "outputId": "1b6c9090-f4b2-445b-de93-da93d93b3bd2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:465: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
            "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
            "\n",
            "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
            "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
            "Please also refer to the documentation for alternative solver options:\n",
            "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
            "  n_iter_i = _check_optimize_result(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.98\n",
            "0.982\n",
            "0.98\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Selection of Best Accuracy Model**\n",
        "\n",
        "*   **Above I used 5 type of different ML Algorithm :- Decision Tree Classifier, SVC, KNN, Bagging, Stacking**\n",
        "\n",
        "*   **So, we got best accuracy 0.99 in Random Forest (Bagging Classifier)**\n",
        "\n",
        "\n",
        "*   **Final ML Alorithm is Random Forest for this project**\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "eLevcmCe2xFB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "bag_clf.fit(X_train_scaler, Y_train_le)\n",
        "y1_pred = bag_clf.predict(X_test_scaler)\n",
        "r2_score(Y_test_le, y1_pred)"
      ],
      "metadata": {
        "id": "TWnVVrfD163d",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ada7ba66-bc7c-4d44-f3c3-9a65a979b847"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9902442405117825"
            ]
          },
          "metadata": {},
          "execution_count": 42
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Confusion metrix and Heat map**"
      ],
      "metadata": {
        "id": "L64bxuZK2mKg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import confusion_matrix\n",
        "import matplotlib.pyplot as plt\n"
      ],
      "metadata": {
        "id": "Mg9Z1CG320Wj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "disp =  confusion_matrix(Y_test_le, y1_pred)"
      ],
      "metadata": {
        "collapsed": true,
        "id": "jpTppaR9f_4b"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "plt.figure(figsize=(12,8))\n",
        "sns.heatmap(disp,annot=True)\n",
        "plt.xlabel(\"Original\")\n",
        "plt.ylabel(\"Predicted\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 696
        },
        "id": "NkEgZddof_nw",
        "outputId": "11b50cb0-5ec0-4b59-a406-16e93be7eea3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **End Of Project**"
      ],
      "metadata": {
        "id": "r0wWK_sv20_J"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "ueqfbiNU4R0p"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
